EXITNPFR TITLE 'NPF Input Record Exit Program for network printers'
***********************************************************************
*---------------------------------------------------------------------*
*                   NPF Input Record Exit                             *
*---------------------------------------------------------------------*
* Program: EXITNPFR                                                   *
* Purpose: NPF Input Record Exit for network printers                 *
* Design : Hunter Guanghui Zhou                                       *
*          Phone: 1-(416)-602-9567                                    *
*          E-mail: zhough2000@yahoo.com                               *
* Date   : April 14, 2003                                             *
* Description:                                                        *
*   This exit program is used for network printers with following     *
*   specifications:                                                   *
*                                                                     *
* Printer Type        Orientation PAPER   CC  Duplex Lines/Page       *
* =================== =========== ======= === ====== ==========       *
* IP Printer w/ PCL 5  LANDSCAPE  Default Yes Yes    64               *
*                                                                     *
* Installation Instructions:                                          *
*                                                                     *
*  1.Compile and generate load module into any LINKLST library.       *
*  2.In TCP/IP Network Print Facility ISPF Panels,                    *
*    a. Select O for Options                                          *
*    b. Select A for ADD                                              *
*    c. Enter the option name, i.e. EXITNPFR                          *
*    d. Enter EXITNPFR as the name of 'Input Record Exit'             *
*    e. Enter 'BINARY CFFIRST' as the LPR options                     *
*  3.Create a NPF printer to use this NPF option                      *
*    In TCP/IP Network Print Facility ISPF Panels,                    *
*    a. Select R for Routing                                          *
*    b. Select A for ADD                                              *
*    c. Enter the printer name, i.e. VCIT3                            *
*       Enter the minor name i.e. ALSCC(Class A, Form LSCC)           *
*    d. Enter EXITNPFR as the option name                             *
*       Enter IP address of target network PCL printer.               *
*       Enter IPPRT as printer name, or given by printer server.      *
*                                                                     *
* Compile:                                                            *
*   This exit program is a reentrent program. RENT option must be     *
*   specified in LINK PARM.                                           *
*   The host name should be given in SYSPARM in PARM.C.               *
*                                                                     *
* //COMPILE EXEC ASMACL,PARM.L='LIST,RENT',                           *
* //  PARM.C='SYSPARM(maintest.agora.lan)'    <== host name           *
* //C.SYSIN   DD DISP=SHR,DSN=SP2487.ASM.SOURCE(EXITNPFR)             *
* //C.SYSLIB  DD DISP=SHR,DSN=TCPIP.SEZACMAC                          *
* //          DD DISP=SHR,DSN=SYS1.MACLIB                             *
* //          DD DISP=SHR,DSN=SYS1.MODGEN                             *
* //L.SYSLMOD DD DISP=SHR,DSN=SYS1.USER.LINKLIB                       *
* //L.SYSIN   DD *                                                    *
*   NAME EXITNPFR(R)                                                  *
* /*                                                                  *
*                                                                     *
* Usage  Instruction:                                                 *
*  Make sure NPF is installed and running (both NPF Writer and        *
*  Queue manager).                                                    *
*                                                                     *
*  You should print the dataset with Carriage Control attributes      *
*  i.e. FBA, VBA datasets.                                            *
*                                                                     *
*  Sample JCL to print the data set                                   *
* //PRINT   EXEC PGM=IEBGENER                                         *
* //SYSPRINT  DD SYSOUT=*                                             *
* //SYSOUT    DD SYSOUT=*                                             *
* //SYSUT1    DD DISP=SHR,DSN=SP2487.TEMP                             *
* //SYSUT2    DD SYSOUT=(A,,LSCC),DEST=VCIT3                          *
*                                                                     *
*---------------------------------------------------------------------*
*        END OF DESCRIPTION OF THE PROGRAM                            *
***********************************************************************
EXITNPFR CSECT
EXITNPFR AMODE ANY
EXITNPFR RMODE ANY
* LOCAL CONSTANTS
         LCLC  &USEBNR,&USECC,&USEPCL,&PCLFORM,&SKIP1FF,&HOSTNAME
&USEBNR  SETC  '&SYSPARM'(1,1)          FLAG TO USE BANNER
&USECC   SETC  '&SYSPARM'(3,1)          FLAG TO USE CARRIAGE CONTROL
&USEPCL  SETC  '&SYSPARM'(5,1)          FLAG TO INSERT PCL COMMANDS
&SKIP1FF SETC  '&SYSPARM'(7,1)          FLAG TO SKIP FIRST FORM-FEED
&PCLFORM SETC  '&SYSPARM'(9,4)          THE PCL FORM NAME
&HOSTNAME SETC '&SYSPARM'(14,44)        THE HOST NAME OF SYSTEM
***********************************************************************
* COMPILE STAGE SYSPARM SYNTAX CHECKING
***********************************************************************
         AIF   ('&USEBNR'  NE '1' AND '&USEBNR'  NE '0').ERRBNR,       X
               ('&USECC'   NE '1' AND '&USECC'   NE '0').ERRCC,        X
               ('&USEPCL'  NE '1' AND '&USEPCL'  NE '0').ERRPCL1,      X
               ('&SKIP1FF' NE '1' AND '&SKIP1FF' NE '0').ERR1FF,       X
               ('&PCLFORM' EQ '    ' AND '&USEPCL' EQ '1').ERRPCL2,    X
               ('&PCLFORM' EQ 'PT00').OKPCLF,                          X
               ('&PCLFORM' EQ 'PT01').OKPCLF,                          X
               ('&PCLFORM' EQ 'PT02').OKPCLF,                          X
               ('&PCLFORM' EQ 'LS00').OKPCLF,                          X
               ('&PCLFORM' EQ 'LS01').OKPCLF,                          X
               ('&PCLFORM' EQ 'LS02').OKPCLF,                          X
               ('&PCLFORM' EQ 'LG00').OKPCLF,                          X
               ('&PCLFORM' EQ 'LG01').OKPCLF,                          X
               ('&PCLFORM' EQ '    ').OKPCLF
         AGO   .START
.ERRBNR  MNOTE 12,'Use banner flag (USEBNR=&USEBNR) is not 0 or 1.'
         AGO   .END
.ERRCC   MNOTE 12,'Use CC     flag (USECC=&USECC) is not 0 or 1.'
         AGO   .END
.ERR1FF  MNOTE 12,'Skip first form feed (&SKIP1FF) is not 0 or 1.'
         AGO   .END
.ERRPCL1 MNOTE 12,'Use PCL    flag (USEPCL=&USEPCL) is not 0 or 1.'
         AGO   .END
.ERRPCL2 MNOTE 12,'The PCL Form cannot be blank when USEPCL is 1.'
         AGO   .END
.ERRPCLF MNOTE 12,'The PCL form (&PCLFORM) is not pre-defined name.'
         MNOTE 12,'PCL Forms are: PT00,LS00,LG00,LG01 and 4 spaces.'
         AGO   .END
.OKPCLF  AGO   .START
.START   ANOP
***********************************************************************
* NORMAL PROCESSING
***********************************************************************
*              Registers           entry       EXITNPFR    exit
R0       EQU   0                   n/a         work        =entry
R1       EQU   1                   >>IRELIST   work        =entry
R2       EQU   2                   n/a         work        =entry
R3       EQU   3                   n/a         work        =entry
R4       EQU   4                   n/a         work        =entry
R5       EQU   5                   n/a         work        =entry
R6       EQU   6                   n/a         work        =entry
R7       EQU   7                   n/a         work        =entry
R8       EQU   8                   n/a         >IRXSTATD   =entry
R9       EQU   9                   n/a         >RTDATA     =entry
R10      EQU   10                  n/a         >IRELIST    =entry
R11      EQU   11                  n/a         base 2      =entry
R12      EQU   12                  n/a         base 1      =entry
R13      EQU   13                  >callsave   >XPCLSTG    =entry
R14      EQU   14                  >return     work        =entry
R15      EQU   15                  >EXITNPFR   retcode     retcode
         USING EXITNPFR,R15       Establish temporary base register
         B     XPCL0000           Branch around constants
         DC    CL23'PROGRAM NAME(EXITNPFR)'      Module identifier
         DC    CL29'COMPILE TIME(&SYSDATE &SYSTIME)'
         DC    CL48'NPF Record Exit Program For Network Printers'
         DC    CL33'SETTINGS: BANNER(&USEBNR) CC(&USECC) PCL(&USEPCL)'
         DC    CL25'SKIP1FF(&SKIP1FF) PCLFORM(&PCLFORM)'
         DC    CL55'HOSTNAME(&HOSTNAME)'
         DC    CL48'Design: Hunter Zhou, zhough2000@yahoo.com    '
XPCLASE2 DC    A(EXITNPFR+4096)   Second base register if needed
XPCL0000 DS    0H
         STM   R14,R12,12(R13)    Save caller's registers
         LR    R12,R15            Change base registers
         DROP  R15                Tell assembler
         USING EXITNPFR,R12,R11
         L     R11,XPCLASE2       Establish second base register
         L     R10,0(R1)          Get address of exit parameter list
         USING IRELIST,R10        Make exit parameter list addressable
         L     R9,IRERTD          Get address of routing data area
         USING RTDATA,R9          Make routing data area addressable
         L     R8,IRESTRG         Get address of IRE static memory
         USING IRXSTATD,R8        Make IRE static storage addressable
         ICM   R1,15,IRXDSTGA     Get address of IRE dynamic storage
         BNZ   XPCL0020           Storage has already been allocated
         GETMAIN RC,LV=STGLEN,LOC=BELOW   Get program storage
         LTR   R15,R15            Did GETMAIN work?
         BZ    XPCL0010           Yes
         WTO   'EXITNPFR GETMAIN FAILED!'
         LA    R15,8              No,  show error
         B     RET00010           Return to NPF
XPCL0010 DS    0H
         ST    R1,IRXDSTGA        Save dynamic storage address
XPCL0020 DS    0H
         ST    R1,8(0,R13)        Complete save area pointers
         ST    R13,4(0,R1)
         LR    R13,R1             Point to dynamic storage area
         USING XPCLSTG,R13        Tell assembler
         USING RECSTG,XPCLSTG+XPCLSTGL Tell assembler
         CLC   RTFUNCTN(4),=CL8'OPEN' Is this OPEN call?
         BE    OPN00000           Yes
         CLC   RTFUNCTN(3),=CL8'PUT'  Is this PUT call?
         BE    PUT00000           Yes
         CLC   RTFUNCTN(5),=CL8'CLOSE' Is this CLOSE call?
         BE    CLS00000           Yes
         CLC   RTFUNCTN(7),=CL8'RELEASE' Is this RELEASE call?
         BE    REL00000           Yes
         CLC   RTFUNCTN(4),=CL8'TERM' Is this TERM call?
         BE    TRM00000           Yes
         WTO   'EXITNPFR UNKNOWN FUNCTION'
         LA    R15,4              Bad function, show error
         B     RET00000           Return to NPF
*---------------------------------------------------------------------*
*        Process OPEN call
*---------------------------------------------------------------------*
OPN00000 DS    0H
         MVI   IRXFLAG,IRX1STR    Set flag for READ FIRST RECORD
         MVI   CCMODE,CCMODASA    DEFAULT IS ASA CARRIAGE CONTROL MODE
         XC    BNRLNCTR,BNRLNCTR  RESET SET BANNER LINE COUNTER
         MVI   BNRBFEOF,NO        SET BANNER LAST LINE TO NO.
         MVI   PCLFLAG,PCLINIT    SET PCL FLAG TO INIT
         XR    R15,R15            Zero return code
         B     RET00000           Go return to NPF
*---------------------------------------------------------------------*
*        Process PUT call
*---------------------------------------------------------------------*
* PROCESSING STEPS:
* 1. INIT
*    R2: CURRENT LOCATION OF TARGET RECORD BUFFER
*    R3: CURRENT LOCATION OF SOURCE RECORD
*    R4: WORK
*    R5: MVCREC: LENGTH OF BYTES TO BE COPIED
*    R5:  TRREC: LENGTH OF BYTES TO BE COPIED
*    R6: MVCREC: TARGET ADDRESS TO BE COPIED TO
*    R6:  TRREC: TARGET ADDRESS TO BE TRANSLATED
*    R7: MVCREC: SOURCE ADDRESS TO BE COPIED FROM
*    R7:  TRREC: ADDRESS OF TRANSLATION TABLE
*
* 2. SAVE AND TEST RECORD INFO: RECORD TYPE AND RECORD LENGTH
*
* 3. TEST RECORD FORMAT
*   FOR VARIABLE LENGTH: R2 += 4; R3 += 4
*
* 4. TEST FIRST RECORD?
*    YES: A. INSERT PCL COMMAND
*         B. CHANGE THE CARIAGE CONTROL COMMAND AS FOLLOWS:
*            '1' TO '+': FORM FEED TO OVERSTRIKE
*            ' ' TO '+': SINGLE SPACE TO OVERSTRIKE
*            '0' TO ' ': DOUBLE SPACE TO SIGNLE SPACE
*            '-' TO '0': TRIPLE SPACE TO BDOUBLE SPACE
* 5. INSERT CARRIAGE COMMAND AS FOLLOW:
*    '1': ADD CRLF(X'0D25') AND FORM FEED BYTE (X'0C), R2 += 3
*    ' ': ADD ONE CRLF (X'0D25')     R2 += 2
*    '0': ADD TWO CRLF               R2 += 4
*    '-': ADD THREE CRLF             R2 += 6
* 6. COPY THE RECORD DATA FROM SOURCE TO TARGET RECORD
*    SKIP THE FIRST CC BYTE          R2 += (RECLEN-1)
*
* 7. UPDATE VARIABLE HEADER 4 BYTES IF IT'S VARIABLE FORMAT
*
* 8. SAVE THE RECORD LENGTH TO RECLEN
*
* 9. TRANSLATE THE DATA PART IN TARGET RECORD INTO ASCII
*
*10. TELL NPF:
*   . NOT SAVE THE CURRENT RECORD
*   . INSERT A NEW RECORD (JUST GENERATED) IN NEXT CONTROL RETURN
******************************************************************
PUT00000 DS    0H
*------PROCESS BANNER PAGE ---------------------------------------
         CLI   IRXFLAG,IRX1STR    IS THIS THE FIRST TIME CALL?
         BNE   PUT00100           NO, PROCESS NEXT STEP
         CLI   USEBNR,YES         INSERT BANNER PAGE
         BE    BNR00000           YES, PROCESS GENERATE BANNER PAGE
         MVI   IRXFLAG,IRX1STP    UPDATE THE IRX FLAG TO IRX1STP
*------PROCESS PCL COMMAND----------------------------------------
PUT00100 DS    0H
         CLI   IRXFLAG,IRX1STP    TIME TO PROCESS PCL COMMAND?
         BNE   PUT00800           NO, SKIP THE PCL PROCESS
         BAL   R4,INSPCL          CALL INSERT PCL COMMAND
         B     RET00000           RETURN TO NPF IF PCL CMD INSERTED.
*------PROCESS INPUT RECORDS -------------------------------------
PUT00800 DS    0H
         CLI   IRXFLAG,IRXNXTI    INSERT THE NEXT RECORD?
         BE    PUT04000           YES, CALL INSERT RECORD
* READ RECORD INFO
         MVC   RECFM(1),RTDARTYP  SAVE THE record TYPE
         MVC   RECLEN(4),IREDLEN  SAVE THE record LENGTH
         LA    R2,RECORD          LOAD THE TARGET RECORD ADDR
         L     R3,IREBPTR         LOAD THE SOURCE RECORD ADDR
* TEST RECORD FORMAT
         CLI   RECFM,RECFMVB      IS THIS A VARIABLE RECORD TYPE?
         BNE   PUT01000           NO, PROCESS THE FIXED LENGTH RECORD
* PROCESS VARIABLE RECORD FORMAT
         LA    R2,4(0,R2)         SKIP THE TARGET VB RECORD HEADER
         LA    R3,4(0,R3)         SKIP THE SOURCE VB RECORD HEADER
* BEGIN TO PROCESS THE RECORD
PUT01000 DS    0H
         CLI   USECC,YES          REQUIRE TO TRANSLATE CC BYTE?
         BE    PUT01100           YES, JUMP TO PROCESS CC
*---------------------------------------------------------------------*
* PROCESS NON-CC RECORDS
*---------------------------------------------------------------------*
         LR    R6,R2              LOAD CURRENT POSITION OF TARGET REC
         LR    R7,R3              LOAD THE START OF SORUCE RECORD
         L     R5,RECLEN          LOAD THE RECORD LENGTH
         AR    R2,R5              UPDATE THE CURRENT POSITION IN R2
         BCTR  R5,0
         EX    R5,MVCREC          COPY THE RECORD
         MVC   0(2,R2),CRLF       COPY CRLF
         LA    R2,2(0,R2)         UPDATE THE CURRENT POSITION
         B     PUT01600
*--------------------------------------------------------------------
* PROCESS CC RECORD: ASA CC AND MC MODE
*--------------------------------------------------------------------
PUT01100 DS    0H
         MVI   COPYREC,YES        DEFAULT IS TO COPY THE SOURCE RECORD
         MVC   CCBYTE(1),0(R3)    SAVE THE CARRIAGE CONTROL BYTE
*--------------------------------------------------------------------
* PROCESS THE FIRST RECORD WITH MACHINE CODES
*--------------------------------------------------------------------
         CLI   IRXFLAG,IRX1STI    IS THIS READ THE FIRST RECORD?
         BNE   PUT01200           NO, PROCESS NEXT NON-FIRST RECORD
         CLI   0(R3),MCTPFF       IS THIS MACHINE CODE BYTE X'8B'?
         BNE   PUT01300           CONTINUE IN ASA MODE
* PROCESS MACHINE CODE MODE
         MVI   CCMODE,CCMODMC     SET MACHINE CODE CARRIAGE MODE
         MVI   CCBYTESV,MCTPFF    SAVE CCBYTE(FF) TO CCBYTESV
         MVI   IRXFLAG,IRX1STM    SET THE FLAG TO FIRST MC RECORD
         MVI   IRERFLG,X'00'      Tell NPF to READ NEXT RECORD
         MVI   IREWFLG,X'01'      DO NOT Write this record
         XR    R15,R15            Zero return code
         B     RET00000           Go return to NPF
*---------------------------------------------------------------------*
* PROCESS NON-FIRST RECORDS
*---------------------------------------------------------------------*
PUT01200 DS    0H
         CLI   CCMODE,CCMODMC     IS THIS MC MODE?
         BNE   PUT01300           NO, CONTINUE TO PROCESS
* SWITCH CCBYTE AND CCBYTESV
         MVC   CCBYTETM(1),CCBYTE
         MVC   CCBYTE(1),CCBYTESV
         MVC   CCBYTESV(1),CCBYTETM
*---------------------------------------------------------------------*
* PROCESS ALL CC RECORDS
*---------------------------------------------------------------------*
PUT01300 EQU   *
         BAL   R4,INSERTCC        INSERT CARRIAGE CONTROL COMMANDS
*---------------------------------------------------------------------*
* COPY THE RECORD FROM SOURCE FOR CC RECORDS
*---------------------------------------------------------------------*
         CLI   COPYREC,YES        NEED TO COPY THE RECORD?
         BNE   PUT01600           NO, SKIP TO COPY IT
         LR    R6,R2              LOAD CURRENT POSITION OF TARGET REC
         LR    R7,R3              LOAD THE START OF SORUCE RECORD
         L     R5,IREDLEN         LOAD THE RECORD LENGTH
         LA    R7,1(0,R7)         SKIP THE FIRST CC BYTE
         BCTR  R5,0               SKIP THE FIRST CC BYTE IN LENGTH
         AR    R2,R5              UPDATE THE CURRENT POSITION IN R2
         BCTR  R5,0
         EX    R5,MVCREC          COPY THE RECORD
*---------------------------------------------------------------------*
* UPDATE THE VARIABLE RECORD HEADER
*---------------------------------------------------------------------*
PUT01600 BAL   R4,UPDREC          UPDATE THE RECORD
*---------------------------------------------------------------------*
*TELL NPF OF NEXT ACTION
*---------------------------------------------------------------------*
PUT01800 DS    0H
         L     R5,RECLEN          LOAD THE RECORD LENGTH
         LTR   R5,R5              RECORD LENGTH IS 0?
         BZ    PUT01850
         MVI   IRXFLAG,IRXNXTI    SET THE FLAG TO INSERT NEXT RECORD
         MVI   IREWFLG,X'01'      DO NOT Write this record
         MVI   IRERFLG,X'01'      Tell NPF to INSERT NEXT RECORD
         B     PUT01900
* IF THE RECORD LENGTH IS 0, THEN READ THE NEXT RECORD, AND DO NOT
* WRITE CURRENT EMPTY RECORD.
PUT01850 EQU   *
         MVI   IRXFLAG,IRXNXTR    SET THE FLAG TO INSERT NEXT RECORD
         MVI   IREWFLG,X'01'      DO NOT Write this record
         MVI   IRERFLG,X'00'      Tell NPF to INSERT NEXT RECORD
PUT01900 XR    R15,R15            Zero return code
         B     RET00000           Go return to NPF
*---------------------------------------------------------------------*
*Process inserting next record
*---------------------------------------------------------------------*
PUT04000 DS    0H
*SAVE THE RECORD
         LA    R6,RECORD
         ST    R6,IREBPTR         SAVE THE RECORD TO IREBPTR
         MVC   IREDLEN(4),RECLEN  SAVE RECORD LENGTH TO IREDLEN
         MVC   RTDARTYP(1),RECFM  SAVE THE record TYPE
*TELL NPF OF NEXT ACTION
         MVI   IRXFLAG,IRXNXTR    SET THE FLAG TO READ NEXT RECORD
         MVI   IREWFLG,X'00'      Write this new record
         MVI   IRERFLG,X'00'      Tell NPF to read NEXT record
         XR    R15,R15            Zero return code
         B     RET00000           Go return to NPF
*---------------------------------------------------------------------*
*        Process CLOSE call
*---------------------------------------------------------------------*
CLS00000 DS    0H
         MVI   IREWFLG,X'01'      No record to write
         MVI   IRERFLG,X'00'      Normal return from CLOSE
         XR    R15,R15            Zero return code
         B     RET00000
*---------------------------------------------------------------------*
*        Process RELEASE or TERM call
*---------------------------------------------------------------------*
REL00000 DS    0H
TRM00000 DS    0H
         LR    R1,R13             Get address of dynamic storage
         L     R13,SAVEAREA+4     Get address of caller's save area
         FREEMAIN RU,LV=STGLEN,A=(R1) Free dynamic storage
         XR    R15,R15            Zero return code
         B     RET00010

*---------------------------------------------------------------------*
*        Return to NPF
*---------------------------------------------------------------------*
RET00000 DS    0H                 Switch back to caller's save area
         L     R13,SAVEAREA+4     Return to caller
RET00010 DS    0H                 Already back to caller's save area
         ST    R15,16(R13)        Set return code in saved R15
         LM    R14,R12,12(R13)    Restore caller's registers
         BSM   0,R14
*---------------------------------------------------------------------*
*                     PRINT BANNER PAGE                               *
*---------------------------------------------------------------------*
* PROGRAM LOGIC:                                                      *
* WHEN TO PRINT THE BANNGER PAGE:                                     *
*  .WHEN IRXFLAG IS IRX1STR                                           *
*  .WHEN BNRPOS-BNRBUF < BNRBFLEN                                     *
* WHEN TO BRANCH:                                                     *
*  .WHEN IRXFLAG IS IRX1STR                                           *
* WHEN TO STOP PRINT BANNGER PAGE AND CHANGE THE STATUS:              *
*  .WHEN BNRPOS-BNRBUF >= BNRBFLEN                                    *
*  .CHANGE STATUS OF IRXFLAG TO IRX1STP                               *
*                                                                     *
* STEP 1. IF BNRLNCTR==0, THEN GET FIELD INFOMRATION:                 *
*  . READ RECORD INFORMATION                                          *
*  . UPDATE THE FLAGS (BNRBFPOS, BNRLNCTR)                            *
*  . FILL THE FIELDS WITH SPACES                                      *
*  . FILL THE FIELDS FROM JSPA AND NPF RTD                            *
*  . FILL THE TIME AND DATE FIELD FROM TIME MACRO AND EDIT            *
*  . TELL NPF TO INSERT A NEW RECORD ON NEXT RETURN CONTROL           *
*                                                                     *
* STEP 2. NORMAL PROCESSING (WHEN NPF RETURN CONTROL)                 *
*  . COPY RECORD FROM BANNER TABLE TO WORK RECORD BUFFER              *
*  . COPY THE FIELD VALUE TO WORK RECORD BUFFER                       *
*  . UPDATE RECORD LENGTH AND VARIABLE RECORD HEADER                  *
*  . TRANSLATE THE RECORD DATA INTO ASCII                             *
*  . UPDATE THE NPF FIELD TO SAVE CURRENT WORK RECORD                 *
*  . UPDATE THE FLAGS (BNRBFPOS, BNRLNCTR)                            *
*                                                                     *
* STEP 3. TEST IF THE LAST BANNER RECORD REACHED.                     *
*  . IF YES, UPDATE THE STATUS OF IRXFLAG TO IRX1STP                  *
*            TELL NPF TO WRITE CURRENT RECORD                         *
*            TELL NPF TO READ THE FIRST RECORD ON SOURCE FILE         *
*  . IF NO,  TELL NPF TO WRITE CURRENT RECORD                         *
*            TELL NPF TO INSERT A RECORD ON NEXT RETURN CONTROL       *
*                                                                     *
* STEP 4. RETURN THE CONTROL BACK TO NPF                              *
***********************************************************************
BNR00000 DS    0H                 PRINT BANNER PAGE
* MAIN BRANCH
         CLI   BNRLNCTR,X'00'     IS THIS FIRST TIME TO CALL BANNER?
         BNE   BNR02000           NO, CONTINUE TO PROCESS
*-------------------------------------------------------------------*
* BANNER INITIALIZATION
* READ INFORMATION OF BANNER FIELDS.
*    A. READ JES2 JOB INFORMATION IN JSPA DSECT                       *
*    B. READ PRINTER DEFINITION IN RDT                                *
*    C. GET CURRENT TIME AND DATE                                     *
*-------------------------------------------------------------------*
BNR01000 DS    0H
         MVC   RECFM(1),RTDARTYP  SAVE THE record TYPE
         MVC   RECLEN(4),IREDLEN  SAVE THE record LENGTH
         LA    R6,BNRBUF          LOAD THE START OF BANNER BUFFER
         ST    R6,BNRBFPOS        SAVE THE CURRENT POSITION OF LINES
         MVI   BNRLNCTR,X'01'     LOAD THE LINE COUNTER BY 1
* INIT ALL FIELDS WITH SPACE
         LA    R5,BNRFDLEN        LOAD THE LENGTH OF FIELD INTO R5
         BCTR  R5,0
         BCTR  R5,0
         MVC   BNRPNTR(44),BNRPNTRC COPY THE MODEL FOR PRINTER NAME
         LA    R6,BNRUSER         FILL FIELD WITH SPACES
         BAL   R4,RESTFLD         CALL THE RESET FIELD ROUTINE
         LA    R6,BNRJBNM         FILL FIELD WITH SPACES
         BAL   R4,RESTFLD         CALL THE RESET FIELD ROUTINE
         LA    R6,BNRDSSN         FILL FIELD WITH SPACES
         BAL   R4,RESTFLD         CALL THE RESET FIELD ROUTINE
         LA    R6,BNRDDNM         FILL FIELD WITH SPACES
         BAL   R4,RESTFLD         CALL THE RESET FIELD ROUTINE
         LA    R6,BNRTIME         FILL FIELD WITH SPACES
         BAL   R4,RESTFLD         CALL THE RESET FIELD ROUTINE
         MVC   0(DATEPTNL,R6),DATEPTN   COPY EDIT PATTERN
* COPY JSPA
         L     R2,IRECPAD         LOAD THE JES/VTAM PARAMETER AREA
         L     R2,0(R2)           LOAD THE ADDRESS OF GETDS AREA
         USING GDSPARM,R2         ADDRESSABILITY FOR GDSPARM
         L     R3,GDSJSPA         LOAD THE JSPA AREA
         USING JSPA,R3            ADDRESSABILITY FOR JSPA
         LH    R4,JSPALEN         LOAD THE JSPA LENGTH
         AR    R4,R3              MOVE TO THE EXTENTION OF JSPA
         USING JSPEXT,R4          ADDRESSABILITY OF JPSAEXT
         LA    R6,BNRJBNM         LOAD ADDRESS OF JOBNAME
         MVC   0(8,R6),JSPAJBNM   COPY THE JOBNAME
         MVI   8(R6),C'/'         JOBNAME/JOBID SEPARATER
         MVC   9(8,R6),JSPAJBID   COPY THE JOBID
         LA    R6,BNRJBNM         LOAD ADDRESS OF JOBNAME
         MVC   0(8,R6),JSPAJBNM   COPY THE JOBNAME
         LA    R6,BNRUSER         LOAD THE USERID FIELD
         MVC   0(8,R6),JSPCEUID   COPY THE USERID
         MVI   8(R6),C'/'
         MVC   9(20,R6),JSPJPNAM  COPY THE PROGRAMMER NAME
         LA    R6,BNRDDNM
         MVC   0(8,R6),JSPJDSDD   COPY THE DD NAME
         LA    R6,BNRDSSN
         MVC   0(8,R6),JSPJDSSN   COPY THE STEP NAME
         LA    R6,BNRDEST
         MVC   0(8,R6),RTDAMAJK   COPY MAJOR ROUTING KEY FOR DEST
         LA    R7,RTDAMINK        MINOR ROUTING KEY (CLASS + FORM)
         LA    R6,BNRCLAS
         MVC   0(1,R6),0(R7)      COPY THE SYSOUT CLASS
         LA    R6,BNRFORM
         MVC   0(4,R6),1(R7)      COPY THE FORM NAME
         DROP  R2,R3,R4
* UPDATE TIME AND DATE
         TIME  DEC,DATESAVE,LINKAGE=SYSTEM,  GET TIME/DATE AT DATAAREA X
               MF=(E,TIMELST),DATETYPE=YYYYMMDD
*        MACDATE  09/08/99
         LA    R6,BNRTIME         LOAD THE TIME FIELD
         LA    R7,DATEAREA        LOAD THE DATA AREA (16 BYTES)
         MVI   0(R7),X'01'        SAVE X'01' for significant lead 0
         ED    0(9,R6),0(R7)      EDIT TIME
         ED    9(12,R6),9(R7)     EDIT DATE
         MVC   0(20,R6),4(R6)     SHIFT TIME FIELD TO LEFT BY 4 BYTES
* TELL NPF TO INSERT A NEW RECORD ON NEXT RETURN CONTROL
         MVI   IREWFLG,X'01'      Not Write CURRENT record
         MVI   IRERFLG,X'01'      Tell NPF to insert new record NEXT
         B     BNR04000           JUMP TO NORMAL PROCESSING
*-------------------------------------------------------------------*
* BANNER PAGE NORMAL PROCESSING
*-------------------------------------------------------------------*
BNR02000 DS    0H
         LA    R6,RECORD          LOAD ADDR OF TARGET RECORD
* TEST RECORD FORMAT
         CLI   RECFM,RECFMVB      IS THIS A VARIABLE RECORD TYPE?
         BNE   BNR02100           NO, PROCESS THE FIXED LENGTH RECORD
* PROCESS VARIABLE RECORD FORMAT
         LA    R6,4(0,R6)         SKIP THE VB RECORD HEADER
* COPY THE RECORD FROM BNRBUF TO RECORD
BNR02100 DS    0H
         LA    R5,BNRRCLEN
         BCTR  R5,0
         L     R7,BNRBFPOS           LOAD CURRENT POSITION
         EX    R5,MVCREC             COPY CURRENT RECORD TO TARGET
         LA    R7,BNRRCLEN(0,R6)     LOAD THE LAST POSITION TO R7
         MVC   0(2,R7),CRLF          COPY THE CRLF TO THE END
* PROCESS THE FIELD VALUES
BNR02200 DS    0H
         LA    R7,BNRLNCTR           LOAD THE LINE COUNTER
         CLI   0(R7),BNRHOSTL        IS THIS A HOST NAME LINE?
         BE    BNR02210
         CLI   0(R7),BNRPNTRL        IS THIS A PRINT NAME LINE?
         BE    BNR02220
         CLI   0(R7),BNRUSERL        IS THIS A USERID    LINE?
         BE    BNR02230
         CLI   0(R7),BNRDSSNL        IS THIS A STEP NAME LINE?
         BE    BNR02240
         CLI   0(R7),BNRDDNML        IS THIS A DD   NAME LINE?
         BE    BNR02250
         CLI   0(R7),BNRJBNML        IS THIS A JOB  NAME LINE?
         BE    BNR02260
         CLI   0(R7),BNRTIMEL        IS THIS A TIME&DATE LINE?
         BE    BNR02270
* NORMAL CONSTANT FIELD
         B     BNR03000
* PROCESS HOST NAME FIELD
BNR02210 LA    R7,BNRHOST              LOAD THE HOST NAME TO BE COPIED
         B     BNR02500
BNR02220 LA    R7,BNRPNTR              LOAD THE PRINTNAME TO BE COPIED
         B     BNR02500
BNR02230 LA    R7,BNRUSER              LOAD THE USER NAME TO BE COPIED
         B     BNR02500
BNR02240 LA    R7,BNRDSSN              LOAD THE STEP NAME TO BE COPIED
         B     BNR02500
BNR02250 LA    R7,BNRDDNM              LOAD THE DD   NAME TO BE COPIED
         B     BNR02500
BNR02260 LA    R7,BNRJBNM              LOAD THE JOB  NAME TO BE COPIED
         B     BNR02500
BNR02270 LA    R7,BNRTIME              LOAD THE TIME&DATE TO BE COPIED
         B     BNR02500
* COPY THE FIELD
BNR02500 DS    0H
         LA    R6,BNRFDBYT(0,R6)       MOVE TO FIELD POSITION
         LA    R5,BNRFDLEN             LOAD THE FIELD LENGTH
         BCTR  R5,0
         EX    R5,MVCREC
BNR03000 DS    0H
* INCREASE THE LINE COUNTER BY 1
         XR    R6,R6
         IC    R6,BNRLNCTR             LOAD THE COUNTER
         LA    R6,1(0,R6)              ADD THE COUNTER BY 1
         STC   R6,BNRLNCTR             SAVE THE COUNTER
* UPDATE THE RECORD LENGTH FOR NORMAL RECORDS
         LA    R5,BNRRCLEN+2           RECORD LENGTH: ADD 2 BYTES CRLF
         ST    R5,RECLEN               SAVE RECORD LENGTH
* UPDATE THE CURRENT LOCATION
         L     R7,BNRBFPOS             LOAD THE CURRENT POSITION
         LA    R7,BNRRCLEN(0,R7)       UPDATE THE CURRENT POSITION
         ST    R7,BNRBFPOS             SAVE THE CURRENT POSITION
         LA    R6,BNRBFEND             LOAD THE END POSITION
* TEST IF THE LAST RECORD REACHED.
         CR    R7,R6                   REACH AT THE END OF BUFFER?
         BL    BNR03100                NO, CONTINUE TO PROCESS
* PROCESS THE LAST LINE IN BANNER PAGE
         MVI   BNRBFEOF,YES            SET LAST LINE FLAG TO YES
         LA    R6,RECORD
         CLI   RECFM,RECFMVB      IS THIS A VARIABLE RECORD TYPE?
         BNE   BNR03050           NO, PROCESS THE FIXED LENGTH RECORD
* PROCESS VARIABLE RECORD HEADER
         LA    R6,4(0,R6)         ADD THE RECORD LENGTH BY 4
BNR03050 DS    0H
         MVI   BNRRCLEN+2(R6),FF       SAVE FORM FEED
         LA    R5,1(0,R5)              ADD RECORD LENGTH BY 1 (FF)
         ST    R5,RECLEN               CRLF=2 BYTES, FF=1 BYTE
BNR03100 DS    0H
         LA    R6,RECORD
* UPDATE RECORD LENGTH: R5: RECORD LENGTH, R6: RECORD ADDRESS
* UPDATE THE VARIABLE RECORD HEADER
         CLI   RECFM,RECFMVB      IS THIS A VARIABLE RECORD TYPE?
         BNE   BNR03200           NO, PROCESS THE FIXED LENGTH RECORD
* PROCESS VARIABLE RECORD HEADER
         LA    R7,4(0,R5)         ADD THE RECORD LENGTH BY 4
         ST    R7,RECLEN          SAVE RECORD LENGTH IN RECLEN
         STH   R7,0(R6)           SAVE RECORD LENGTH IN FIRST 2 BYTES
         MVI   2(R6),X'00'        SET THE THIRD BYTE WITH X'00'
         MVI   3(R6),X'00'        SET THE FOURTH BYTE WITH X'00'
         LA    R6,4(0,R6)         MOVE THE R6 TO DATA FOR TR
* TRANSLATE THE RECORD INTO ASCII
BNR03200 DS    0H
         BCTR  R5,0
         LA    R7,E2ATAB
         EX    R5,TRREC           TRANSLATE THE RECORD INTO ASCII
BNR03400 DS    0H
* SAVE THE RECORD INFO FOR NPF TO PUT
         LA    R6,RECORD          LOAD RECORD ADDRESS
         ST    R6,IREBPTR         SAVE THE RECORD TO IREBPTR
         L     R6,RECLEN          LOAD THE RECORD LENGTH
         ST    R6,IREDLEN         SAVE RECORD LENGTH TO IREDLEN
* UPDATE & TEST THE CURRENT LOCATION
         CLI   BNRBFEOF,YES       LOAD THE EOF FLAG ADDRESS
         BNE   BNR03500                NO, CONTINUE TO PROCESS
* IF LAST RECORD, UPDATE THE STATUS OF IRXFLAG TO IRX1STP
* REACH AT THE END OF BANNER BUFFER
         MVI   IRXFLAG,IRX1STP         UPDATE THE IRX FLAG TO IRX1STP
         MVI   IREWFLG,X'00'           Write this record
         MVI   IRERFLG,X'02'           Tell NPF to read FIRST RECORD
         B     BNR04000
* NOT REACH AT THE END OF BANNER BUFFER
BNR03500 DS    0H
         MVI   IREWFLG,X'00'           Write this record
         MVI   IRERFLG,X'01'           Tell NPF to INSERT NEXT RECORD
BNR04000 DS    0H
         XR    R15,R15                 Zero return code
         B     RET00000
***********************************************************************
*---------------------------------------------------------------------*
* ROUTINE: RESTFLD
* PURPOSE: FILL OUT THE FIELD WITH SPACES
* INPUT  :
*    R4: RETURN CONTROL
*    R5: THE LENGTH OF THE FIELD - 2
*    R6: THE START POSITION OF THE FIELD
***********************************************************************
RESTFLD  EQU   *
         ST    R4,SAVERTN1        SAVE THE CALLER'S ADDRESS
         LR    R7,R6
         LA    R6,1(0,R6)
         MVI   0(R7),C' '
         EX    R5,MVCREC
         L     R4,SAVERTN1
         BR    R4
*---------------------------------------------------------------------*
* ROUTINE: INSERTCC
* PURPOSE: INSERT CARRIAGE CONTROL CODE BYTE TO OUTPUT RECORD
* INPUT  :
*    R2: THE START POSITION OF OUTPUT RECORD
*    R4: RETURN CONTROL
* OUTPUT :
*    R6: WORK
* STEPS:
***********************************************************************
*---------------------------------------------------------------------*
***********************************************************************
INSERTCC EQU   *
         ST    R4,SAVERTN1        SAVE THE CALLER'S ADDRESS
         CLI   IRXFLAG,IRX1STI    IS THIS READ THE FIRST RECORD?
         BE    INC01000           YES PROCESS SKIP FIRST FORM-FEED
         CLI   IRXFLAG,IRX1STM    IS THIS READ THE FIRST RECORD OF MC?
         BE    INC01000           YES PROCESS SKIP FIRST FORM-FEED
         B     INC05000
* PROCESS SKIP THE FIRST FORM-FEED BYTE
INC01000 EQU   *
         CLI   SKIP1FF,YES        SKIP FIRST FORM-FEED?
         BE    INC08000           YES, SKIP TO INSERT THE CC BYTE
         MVI   0(R2),FF           SET THE FIRST FORM-FEED WITHOUT CRLF
         LA    R2,1(0,R2)         MOVE R2 TO NEW START POSITION
         B     INC08000           SKIP TO SCAN THE TABLE
* INSERT ASCII CC
INC05000 LA    R6,CCBYTE          LOAD CCBYTE
         BAL   R4,FINDCC          LOAD THE RECORD INTO R7
* INSERT THE ASCII CONTROL BYTES
         LR    R6,R2              LOAD THE TARGET RECORD ADDRESS
         LH    R5,0(R7)           LOAD THE RECORD LENGTH
         LA    R7,4(0,R7)         SKIP THE LENGTH AND CONTROL BYTE
         BCTR  R5,0
         BCTR  R5,0
         BCTR  R5,0
         BCTR  R5,0
         LTR   R5,R5              IS INSERT BYTES ZERO? OVERSTRIKE?
         BZ    INC09000           YES, DO NOTHING
         AR    R2,R5              MOVE THE TARGET ADDRESS TO NEW ADDR.
         BCTR  R5,0               DECREASE R5 BY 1 FOR MVC
         EX    R5,MVCREC          COPY THE ASCII BYTES TO TARGET
INC08000 EQU   *
* GET THE COPY RECORD FLAG USING CCBYTESV
         LA    R6,CCBYTESV        LOAD CCBYTESV
         BAL   R4,FINDCC          LOAD THE RECORD INTO R7
         MVC   COPYREC(1),3(R7)   COPY THE SAVE SOURCE RECORD TAG
INC09000 EQU   *
         L     R4,SAVERTN1
         BR    R4
*---------------------------------------------------------------------*
* ROUTINE: FINDCC
* PURPOSE: FIND CARRIAGE CONTROL CODE BYTE IN THE TABLE
* INPUT  :
*    R6: START POSITION OF CCBYTE
*    R4: RETURN CONTROL
* OUTPUT :
*    R5: WORK
*    R7: START POSITION OF THE RECORD RELATED TO THIS CC BYTE
* STEPS:
***********************************************************************
*---------------------------------------------------------------------*
***********************************************************************
FINDCC   EQU   *
         ST    R4,SAVERTN2
         LA    R7,CCATAB          LOAD ASA TRANSLATION TABLE
         CLI   CCMODE,CCMODMC     IS MACHINE CODE MODE?
         BNE   FNC01000           NO, CONTINUE
         LA    R7,CCMTAB          LOAD MC TRANSLATION TABLE
FNC01000 EQU   *
         L     R4,0(R7)           GET THE TABLE LENGTH
         AR    R4,R7              MOVE TO THE END OF THE TABLE
         LA    R7,4(0,R7)         MOVE TO THE FIRST RECORD
FNC01100 EQU   *                  BEGIN LOOP
         LH    R5,0(R7)           LOAD THE RECORD LENGTH
         CLC   0(1,R6),2(R7)      IS THIS THE RIGHT CC BYTE?
         BE    FNC02000           YES, PROCESS THE INSERT
         AR    R7,R5              MOVE TO THE NEXT RECORD
         CR    R7,R4              REACH AT THE END OF TABLE?
         BL    FNC01100           NO, PROCESS NEXT RECORD
* IF NOT FIND, GET THE FIRST RECORD AS DEFAULT
         LA    R7,CCATAB+4        LOAD ASA TRANSLATION TABLE
         CLI   CCMODE,CCMODMC     IS MACHINE CODE MODE?
         BNE   FNC02000           NO, CONTINUE
         LA    R7,CCMTAB+4        LOAD MC TRANSLATION TABLE
FNC02000 EQU   *
         L     R4,SAVERTN2
         BR    R4
*---------------------------------------------------------------------*
* ROUTINE: INSPCL
* PURPOSE: INSERT PCL COMMAND AT THE BEGINING OF INPUT RECORDS.
*          IT SHOULD BE BETWEEN BANNER PAGE AND FIRST RECORD
* INPUT  :
*    R4: RETURN CONTROL
*  PCLFORM: THE PREDEFINED FORM NAME
* OUTPUT :
*    R4: WORK
*    R5: WORK
*    R6: WORK
*    R7: WORK
***********************************************************************
*---------------------------------------------------------------------*
INSPCL   EQU   *
         ST    R4,SAVERTN1        SAVE THE CALLER'S ADDRESS
         CLI   USEPCL,YES         REQUIRE TO INSERT PCL COMMAND?
         BNE   INP08000           NO, SKIP PCL COMMAND PROCESSING
         CLI   PCLFLAG,PCLINST    IS THIS FIRST TIME CALL?
         BE    INP06000           YES, SAVE RECORD
* PREPARE THE PCL COMMAND IN RECORD FOR THE FIRST TIME CALL.
* FIND THE GIVEN PCL COMMAND SEQUENCE VIA TABLE PCLTAB
         MVC   RECFM(1),RTDARTYP  SAVE THE record TYPE
         MVC   RECLEN(4),IREDLEN  SAVE THE record LENGTH
         LA    R7,PCLTAB          LOAD THE START OF PCL TABLE
         L     R5,0(R7)           LOAD THE LENGTH OF PCL TABLE
         AR    R5,R7              MOVE TO THE END OF THE PCL TABLE
         LA    R7,4(0,R7)         SKIP THE TABLE LENGTH
INP01000 DS    0H
         CLC   PCLFORM(4),0(R7)   IS THIS THE GIVEN FORM?
         BE    INP02000           YES, PROCESS IT.
         LA    R7,PCLRECL(0,R7)   MOVE TO THE NEXT RECORD
         CR    R7,R5              REACH AT THE END OF TABLE?
         BL    INP01000           NO, TEST THE NEXT RECORD
* IF THE FORM IS NOT FOUND, USE THE FIRST ONE AS DEFAULT.
         LA    R7,PCLTAB+4        OTHERWISE USE THE FIRST RECORD AS DEF
INP02000 DS    0H
         L     R7,4(R7)           LOAD THE ADDRESS OF PCL COMMAND
         LH    R5,0(R7)           LOAD THE PCL COMMAND LENGTH
         LA    R7,2(0,R7)         SKIP THE LENGTH 2 BYTES
         BCTR  R5,0
         BCTR  R5,0
* END OF PCL TABLE SEARCHING: SOURCE IN R7, LENGTH IN R5
         LR    R2,R5              COPY THE RECORD LENGTH
         LA    R6,RECORD          LOAD ADDR OF TARGET RECORD
         CLI   RECFM,RECFMVB      IS THIS A VARIABLE RECORD TYPE?
         BNE   INP03000           NO, PROCESS THE FIXED LENGTH RECORD
         LA    R6,4(0,R6)         SKIP VB HEADER
INP03000 DS    0H
         BCTR  R5,0               DECREASE THE PCLLEN BY 1
         EX    R5,MVCREC          COPY THE PCL COMMAND TO RECORD BUFFER
         AR    R2,R6              MOVE R2 TO THE LAST BYTE
         BAL   R4,UPDREC          CALL UPDATE RECORD ROUTINE
         MVI   PCLFLAG,PCLINST    UPDATE THE STATUS TO INSERT PCL CMD
         MVI   IREWFLG,X'01'      DO NOT Write this record
         MVI   IRERFLG,X'01'      Tell NPF to INSERT A NEW RECORD
         B     INP09000           END OF RECORD PREPARATION
* SAVE THE CURRENT RECORD FOR PCLFLAG=PCLINST
INP06000 DS    0H
* SAVE THE RECORD INFO FOR NPF TO PUT
         LA    R6,RECORD
         ST    R6,IREBPTR         SAVE THE RECORD TO IREBPTR
         MVC   IREDLEN(4),RECLEN  SAVE RECORD LENGTH TO IREDLEN
         MVC   RTDARTYP(1),RECFM  SAVE THE record TYPE
         MVI   IRXFLAG,IRX1STI    UPDATE THE IRX FLAG TO IRX1STI
         MVI   IREWFLG,X'00'      Write this record
         MVI   IRERFLG,X'02'      Tell NPF to read FIRST RECORD
         B     INP09000
* SKIP PCL COMMAND PROCESSING
INP08000 DS    0H
         MVI   IRXFLAG,IRX1STI    UPDATE THE IRX FLAG TO IRX1STI
         MVI   IREWFLG,X'01'      DO NOT Write this record
         MVI   IRERFLG,X'02'      Tell NPF to read FIRST RECORD
INP09000 DS    0H
         XR    R15,R15            Zero return code
         L     R4,SAVERTN1
         BR    R4
*---------------------------------------------------------------------*
*---------------------------------------------------------------------*
* ROUTINE: UPDREC
* PURPOSE: UPDATE THE RECORD HEADER AND TRANSLATE IT TO ASCII
*        1. UPDATE RECLEN WITH ACTUAL RECORD LENGTH
*        2. UPDATE VB RECORD HEADER IF IT'S VB
*        3. TRANSLATE THE RECORD INTO ASCII
* INPUT  :
*    R2: THE LAST POSITION OF TARGET RECORD
*    R4: RETURN CONTROL
*  PCLFORM: THE PREDEFINED FORM NAME
* OUTPUT :
*    R2: NEW LOCATION OF TARGET RECORD
*    R5: WORK
*    R6: WORK
*    R7: WORK
* UPDATE THE VARIABLE RECORD HEADER
*---------------------------------------------------------------------*
UPDREC   EQU   *
         ST    R4,SAVERTN2        SAVE THE CALLER'S ADDRESS
* GET THE RECORD LENGTH IN R5
         LA    R6,RECORD          LOAD THE START POSITION
         LR    R5,R2              LOAD THE LAST POSITION IN R5
         SR    R5,R6              SUBTRACT THEM TO GET THE RECORD LEN
         ST    R5,RECLEN          SAVE THE CURRENT RECORD LENGTH
* TEST RECORD FORMAT
         CLI   RECFM,RECFMVB      IS THIS A VARIABLE RECORD TYPE?
         BNE   UPD01000           NO, PROCESS THE FIXED LENGTH RECORD
* PROCESS VARIABLE RECORD HEADER
         STH   R5,0(R6)           SAVE RECORD LENGTH IN FIRST 2 BYTES
         MVI   2(R6),X'00'        SET THE THIRD BYTE WITH X'00'
         MVI   3(R6),X'00'        SET THE FOURTH BYTE WITH X'00'
         LA    R6,4(0,R6)         MOVE THE R6 TO DATA
*---------------------------------------------------------------------*
* TRANSLATE THE RECORD INTO ASCII
*---------------------------------------------------------------------*
UPD01000 DS    0H
         BCTR  R5,0
         LA    R7,E2ATAB          LOAD THE EBCIDC TO ASCII TABLE
         EX    R5,TRREC           TRANSLATE THE RECORD INTO ASCII
         L     R4,SAVERTN2
         BR    R4
*---------------------------------------------------------------------*
*        PROGRAM CONSTANTS DATA AREA
*---------------------------------------------------------------------*
         LTORG
*---------------------------------------------------------------------*
* CONSTANT TO CONTROL HOW THE PRINT OUTPUT GENERATED
*---------------------------------------------------------------------*
PCLFORM  DC    CL4'&PCLFORM'     ; THE FORM NAME
USEBNR   DC    X'&USEBNR'        ; FLAG TO INSERT BANNER PAGE OR NOT
USEPCL   DC    X'&USEPCL'        ; FLAG TO INSERT PCL COMMAND OR NOT
USECC    DC    X'&USECC'         ; FLAG TO CONVERT CARRIAGE CONTROL
SKIP1FF  DC    X'&SKIP1FF'       ; FLAG TO SKIP FORM FEED OF 1ST RECORD
YES      EQU   X'1'              ; YES
NO       EQU   X'0'              ; NO
*---------------------------------------------------------------------*
MVCREC   MVC   0(0,R6),0(R7)     ; COPY RECORD FROM R7 to R6,length R5
TRREC    TR    0(0,R6),0(R7)     ; TRANSLATE FROM R7 to R6,length R5
CRLF     DC    XL2'0D25'         ; CR-LF IN EBCDIC CODE
FF       EQU   X'0C'             ; FORM FEED BYTE IN EBCDIC
MCTPFF   EQU   X'8B'              THE FIRST BYTE OF FIRST MC RECORD
CCTPFF   EQU   C'1'               CC BYTE '1' FORM FEED
*---------------------------------------------------------------------*
CCATAB   DS    0F      CARRIAGE CONTROL TO ASCII TRANSLATION TABLE
* ASA CARRIAGE CONTROL BYTES
* DEFAULT BYTE: CCA1SP: SINGLE RETURN
         DC    AL4(CCATABL)      TABLE LENGTH
*              LENGTH       COMMAND WRITE? INSERT ASCII COMMANDS
CCA1SP   DC    AL2(CCA1SPL),CL1' ',XL1'1',XL2'0D25'
CCA1SPL  EQU   *-CCA1SP          1 SPACE LINE: CRLF
CCAAFF   DC    AL2(CCAAFFL),CL1'1',XL1'1',XL3'0D250C'
CCAAFFL  EQU   *-CCAAFF          ASA FORM FEED: CRLF + FF
CCA0SP   DC    AL2(CCA0SPL),CL1'+',XL1'1'
CCA0SPL  EQU   *-CCA0SP          0 SPACE LINE: DO NOTHING
CCA2SP   DC    AL2(CCA2SPL),CL1'0',XL1'1',XL4'0D250D25'
CCA2SPL  EQU   *-CCA2SP          1 SPACE LINE: CRLF
CCA3SP   DC    AL2(CCA3SPL),CL1'-',XL1'1',XL6'0D250D250D25'
CCA3SPL  EQU   *-CCA3SP          1 SPACE LINE: CRLF
* ALL OTHER CARRIAGE CONTROL BYTES WILL BE TREATED AS CCA1SP
CCATABL EQU    *-CCATAB         THE LENGTH OF THE TABLE
*---------------------------------------------------------------------*
CCMTAB   DS    0F      CARRIAGE CONTROL TO ASCII TRANSLATION TABLE
* MACHINE CODE CONTROL BYTES (PRINTER CHANNEL COMMANDS)
* DEFAULT BYTE: CCMWS1L: SINGLE RETURN
         DC    AL4(CCMTABL)      TABLE LENGTH
*              LENGTH        COMMAND WRITE? INSERT ASCII COMMANDS
CCMWS1L  DC    AL2(CCMWS1LL),XL1'09',XL1'1',XL2'0D25'
CCMWS1LL EQU   *-CCMWS1L         Write and Space 1 line
CCMWS2L  DC    AL2(CCMWS2LL),XL1'11',XL1'1',XL4'0D250D25'
CCMWS2LL EQU   *-CCMWS2L         Write and Space 2 lines
CCMWS3L  DC    AL2(CCMWS3LL),XL1'19',XL1'1',XL6'0D250D250D25'
CCMWS3LL EQU   *-CCMWS3L         Write and Space 3 lines
CCMWSC1  DC    AL2(CCMWSC1L),XL1'89',XL1'1',XL4'0D250C'
CCMWSC1L EQU   *-CCMWSC1         Write and Skip to Channel 1: CRLF + FF
CCMSP1L  DC    AL2(CCMSP1LL),XL1'0B',XL1'0',XL2'0D25'
CCMSP1LL EQU   *-CCMSP1L         Space 1 line immidiate
CCMSP2L  DC    AL2(CCMSP2LL),XL1'13',XL1'0',XL4'0D250D25'
CCMSP2LL EQU   *-CCMSP2L         Space 2 lines immidiate
CCMSP3L  DC    AL2(CCMSP3LL),XL1'1B',XL1'0',XL6'0D250D250D25'
CCMSP3LL EQU   *-CCMSP3L         Space 3 lines immidiate
CCMSKC1  DC    AL2(CCMSKC1L),XL1'8B',XL1'0',XL1'0C'
CCMSKC1L EQU   *-CCMSKC1         Skip to Channel 1 Immediate: FORM FEED
* ALL OTHER CARRIAGE CONTROL BYTES WILL BE TREATED AS CCMSP1L
CCMTABL EQU    *-CCMTAB         THE LENGTH OF THE TABLE
*---------------------------------------------------------------------*
* MACHINE CODE  BYTE  (PRINTER CHANNEL COMMANDS)
* MACHINE CODE TO CARRIAGE CONTROL TRANSLATION TABLE
* PRE-DEFINED FORMS OF PCL COMMANDS
MCTAB    DS    0F                ; FULL WORD ALIGNMENT
         DC    AL4(MCTABL)       ; LENGTH OF THIS TABLE
MCTP1SP  DC    X'09',C' '         Write and Space 1 Lines: DEFAULT
MCRECL   EQU   *-MCTP1SP          RECORD LENGTH
         DC    X'8B',C'1'         Skip to Channel 1 Immediate:FORM FEED
         DC    X'89',C'1'         Write and skip to Channel 1:FORM FEED
         DC    X'11',C'0'         Write and Space 2 Lines
         DC    X'19',C'-'         Write and Space 3 Lines
         DC    X'0B',C' '         Space 1 Line Immediate
         DC    X'13',C'0'         Space 2 Lines Immediate
         DC    X'1B',C'-'         Space 3 Lines Immediate
         DC    X'01',C'+'         Write Without Spacing
* ALL OTHER MACHINE CODE WILL BE TRANSLATED TO CCTP1SP
MCTABL   EQU   *-MCTAB            TABLE LENGTH
*---------------------------------------------------------------------*
* PRE-DEFINED FORMS OF PCL COMMANDS
PCLTAB   DS    0F                ; FULL WORD ALIGNMENT
         DC    AL4(PCLTABL)      ; LENGTH OF THIS PCL TABLE
PCLFPT00 DC    CL4'PT00',AL4(PCLPT00)  PORTRAIT,  DEFATULT PAPER
PCLRECL  EQU   *-PCLFPT00              RECORD LENGTH
PCLFPT01 DC    CL4'PT01',AL4(PCLPT01)  PORTRAIT,  DEFATULT PAPER
PCLFPT02 DC    CL4'PT02',AL4(PCLPT02)  PORTRAIT,  DEFATULT PAPER
PCLFLS00 DC    CL4'LS00',AL4(PCLLS00)  LANDSCAPE, DEFAULT PAPER
PCLFLS01 DC    CL4'LS01',AL4(PCLLS01)  LANDSCAPE, DEFAULT PAPER
PCLFLS02 DC    CL4'LS02',AL4(PCLLS02)  LANDSCAPE, DEFAULT PAPER
PCLFLG00 DC    CL4'LG00',AL4(PCLLG00)  LANDSCAPE, LEGAL PAPER
PCLFLG01 DC    CL4'LG01',AL4(PCLLG01)  PORTRAIT,  LEGAL PAPER
PCLTABL  EQU   *-PCLTAB                THE END OF TABLE
*---------------------------------------------------------------------*
* PCL 5 Commands in EBCDIC format
* PCL FORM: PCLCLS00 FOR LANDSCAPE, DEFAULT PAPER, 14 picth
PCLLS00  DS    0H                    HP PCL 5 Command sequences
         DC    AL2(PCLLS00L)         LENGTH OF THIS PCL COMMAND
         DC    X'27',C'E'            Reset PCL settings
         DC    X'27',X'50',C'l1O'    Select landscape <EC>&l1O
         DC    X'27',X'50',C'l4.5C'  4.5/48 inch vertical motion index
         DC    X'27',X'50',C'l1S'    Duplex, long-side binding
         DC    X'27',C'(s14H'        Use 15 pitch (characters / inch)
         DC    X'27',C'(s0P'         Fixed Spacing
         DC    X'27',C'(s0S'         Style of upright solid
         DC    X'27',C'(s0B'         Stroke Weight: Medium, Book Text
PCLLS00L EQU   *-PCLLS00
* PCL FORM: PCLCLS01 FOR LANDSCAPE, DEFAULT PAPER, 13 pitch
PCLLS01  DS    0H                    HP PCL 5 Command sequences
         DC    AL2(PCLLS01L)         LENGTH OF THIS PCL COMMAND
         DC    X'27',C'E'            Reset PCL settings
         DC    X'27',X'50',C'l1O'    Select landscape <EC>&l1O
         DC    X'27',X'50',C'l5.7C'  5.7/48 inch vertical motion index
         DC    X'27',X'50',C'l1S'    Duplex, long-side binding
         DC    X'27',C'(s13H'        Use 13 pitch (characters / inch)
         DC    X'27',C'(s0P'         Fixed Spacing
         DC    X'27',C'(s0S'         Style of upright solid
         DC    X'27',C'(s0B'         Stroke Weight: Medium, Book Text
PCLLS01L EQU   *-PCLLS01
* PCL FORM: PCLCLS00 FOR LANDSCAPE, DEFAULT PAPER, 14 picth, SIMPLEX
PCLLS02  DS    0H                    HP PCL 5 Command sequences
         DC    AL2(PCLLS02L)         LENGTH OF THIS PCL COMMAND
         DC    X'27',C'E'            Reset PCL settings
         DC    X'27',X'50',C'l1O'    Select landscape <EC>&l1O
         DC    X'27',X'50',C'l4.5C'  4.5/48 inch vertical motion index
         DC    X'27',C'(s14H'        Use 15 pitch (characters / inch)
         DC    X'27',C'(s0P'         Fixed Spacing
         DC    X'27',C'(s0S'         Style of upright solid
         DC    X'27',C'(s0B'         Stroke Weight: Medium, Book Text
PCLLS02L EQU   *-PCLLS02
* PCL FORM: PCLCLG00 FOR LANDSCAPE, LEGAL   PAPER
PCLLG00  DS    0H                    HP PCL 5 Command sequences
         DC    AL2(PCLLG00L)         LENGTH OF THIS PCL COMMAND
         DC    X'27',C'E'            Reset PCL settings
         DC    X'27',X'50',C'l3A'    Select LEGAL paper
         DC    X'27',X'50',C'l1O'    Select landscape <EC>&l1O
         DC    X'27',X'50',C'l4.5C'  4.5/48 inch vertical motion index
         DC    X'27',C'(s14H'        Use 14 pitch (characters / inch)
         DC    X'27',C'(s0P'         Fixed Spacing
         DC    X'27',C'(s0S'         Style of upright solid
         DC    X'27',C'(s0B'         Stroke Weight: Medium, Book Text
PCLLG00L EQU   *-PCLLG00
* PCL FORM: PCLCLG01 FOR PORTRAIT,  LEGAL   PAPER
PCLLG01  DS    0H                    HP PCL 5 Command sequences
         DC    AL2(PCLLG01L)         LENGTH OF THIS PCL COMMAND
         DC    X'27',C'E'            Reset PCL settings
         DC    X'27',X'50',C'l3A'    Select LEGAL paper
         DC    X'27',X'50',C'l0O'    Select PORTRAIT  <EC>&l0O
         DC    X'27',X'50',C'l5C'    5/48 inch vertical motion index
         DC    X'27',C'(s17H'        Use 14 pitch (characters / inch)
         DC    X'27',C'(s0P'         Fixed Spacing
         DC    X'27',C'(s0S'         Style of upright solid
         DC    X'27',C'(s0B'         Stroke Weight: Medium, Book Text
PCLLG01L EQU   *-PCLLG01
* PCL FORM: PCLCPT00 FOR PORTRAIT,  DEFAULT PAPER, 17 PITCH
PCLPT00  DS    0H                    HP PCL 5 Command sequences
         DC    AL2(PCLPT00L)         LENGTH OF THIS PCL COMMAND
         DC    X'27',C'E'            Reset PCL settings
         DC    X'27',X'50',C'l0O'    Select portrait  <EC>&l0O
         DC    X'27',X'50',C'l5C'    6x1/48 inch vertical motion index
         DC    X'27',X'50',C'l1S'    Duplex, long-side binding
         DC    X'27',C'(s17H'        Use 17 pitch (characters / inch)
         DC    X'27',C'(s0P'         Fixed Spacing
         DC    X'27',C'(s0S'         Style of upright solid
         DC    X'27',C'(s0B'         Stroke Weight: Medium, Book Text
PCLPT00L EQU   *-PCLPT00
* PCL FORM: PCLCPT00 FOR PORTRAIT,  DEFAULT PAPER, 14 PITCH
PCLPT01  DS    0H                    HP PCL 5 Command sequences
         DC    AL2(PCLPT01L)         LENGTH OF THIS PCL COMMAND
         DC    X'27',C'E'            Reset PCL settings
         DC    X'27',X'50',C'l0O'    Select portrait  <EC>&l0O
         DC    X'27',X'50',C'l5C'    6x1/48 inch vertical motion index
         DC    X'27',X'50',C'l1S'    Duplex, long-side binding
         DC    X'27',C'(s14H'        Use 14 pitch (characters / inch)
         DC    X'27',C'(s0P'         Fixed Spacing
         DC    X'27',C'(s0S'         Style of upright solid
         DC    X'27',C'(s0B'         Stroke Weight: Medium, Book Text
PCLPT01L EQU   *-PCLPT01
* PCL FORM: PCLCPT00 FOR PORTRAIT,  DEFAULT PAPER, 15 PITCH, SIMPLEX
PCLPT02  DS    0H                    HP PCL 5 Command sequences
         DC    AL2(PCLPT02L)         LENGTH OF THIS PCL COMMAND
         DC    X'27',C'E'            Reset PCL settings
         DC    X'27',X'50',C'l0O'    Select portrait  <EC>&l0O
         DC    X'27',X'50',C'l5C'    6x1/48 inch vertical motion index
         DC    X'27',C'(s17H'        Use 14 pitch (characters / inch)
         DC    X'27',C'(s0P'         Fixed Spacing
         DC    X'27',C'(s0S'         Style of upright solid
         DC    X'27',C'(s0B'         Stroke Weight: Medium, Book Text
PCLPT02L EQU   *-PCLPT02
*---------------------------------------------------------------------*
*EBCDIC-to-ASCII table for Canadian Bilingual CECP Code Page 037
*
*             000102030405060708090A0B0C0D0E0F
E2ATAB   DS 0CL256
         DC X'00010203DC09C37FCAB2D50B0C0D0E0F' ;00;
         DC X'10111213DBDA08C11819C8F21C1D1E1F' ;10;
         DC X'C4B3C0D9BF0A171BB4C2C5B0B1050607' ;20;
         DC X'CDBA16BCBBC9CC04B9CBCEDF1415FE1A' ;30;
         DC X'20FF838485A0C68687A4BD2E3C282B7C' ;40;
         DC X'268288898AA18C8B8DE121242A293BAA' ;50;
         DC X'2D2FB68EB7B5C78F80A5DD2C255F3E3F' ;60;
         DC X'9B90D2D3D4D6D7D8DE603A2340273D22' ;70;
         DC X'9D616263646566676869AEAFD0ECE7F1' ;80;
         DC X'F86A6B6C6D6E6F707172A6A791F792CF' ;90;
         DC X'E67E737475767778797AADA8D1EDE8A9' ;A0;
         DC X'5E9CBEFAB8F5F4ACABF35B5DEEF9EF9E' ;B0;
         DC X'7B414243444546474849F0939495A2E4' ;C0;
         DC X'7D4A4B4C4D4E4F505152FB968197A398' ;D0;
         DC X'5CF6535455565758595AFDE299E3E0E5' ;E0;
         DC X'30313233343536373839FCEA9AEBE99F' ;F0;
* BANNER PAGE LAYOUT
*                                                                 LINE#
BNRBUF   DS 0C
         DC C'****************************************'
         DC C'****************************************'              01
         DC C'*                                       '
         DC C'                                       *'              02
         DC C'*            ...                        '
         DC C'                        .::::.         *'              03
         DC C'*         .:::::       :::              '
         DC C'                        ::::::         *'              04
         DC C'*        .:::''''''       :::              '
         DC C' ...      ...  ..       ::::::         *'              05
         DC C'*        :::  .:::::.  :::::::.   .:::::'
         DC C'.''::.    .::''.:::  .::::''::::''::::.    *'          06
         DC C'*        ::: .:::::::. ::::::::. .::::::'
         DC C':.''::.  .::'':::''''  ::::::    ::::::    *'          07
         DC C'*        ::: :::   ::: :::   ::: :::  ::'''
         DC C''' '':::.::  :::    ::::::    ::::::    *'             08
         DC C'*       .::: :::   ::: :::   ::: :::.:'' '
         DC C'.   ::::''  .:::    ''::::.::::.::::''    *'           09
         DC C'*    ..::::'' ''::...::'' ''::...::'' '':::. :'
         DC C'::  :::'' ::::''          ::::::         *'            0A
         DC C'*    ::::''''   '':::::''   '':::::''   '':::::'''
         DC C''' .::''  :::''           ::::::         *'            0B
         DC C'*    ''''''                                '
         DC C'  .::''                  ''::::''         *'           0C
         DC C'*                                       '
         DC C' .::''                                  *'             0D
         DC C'*                                       '
         DC C'                                       *'              0E
         DC C'*                     Sobeys Ontario Pro'
         DC C'duction Mainframe                      *'              0F
         DC C'*                                       '
         DC C'                                       *'              10
         DC C'*                           Network Prin'
         DC C'ting Service                           *'              11
         DC C'*                                       '
         DC C'                                       *'              12
         DC C'*       ********************************'
         DC C'********************************       *'              13
         DC C'*       * FROM HOST   :                 '
         DC C'                               *       *'              14
         DC C'*       * TO PRINTER  :                 '
         DC C'                               *       *'              15
         DC C'*       * USERID/NAME :                 '
         DC C'                               *       *'              16
         DC C'*       * JOB NAME/ID :                 '
         DC C'                               *       *'              17
         DC C'*       * STEP NAME   :                 '
         DC C'                               *       *'              18
         DC C'*       * DD NAME     :                 '
         DC C'                               *       *'              19
         DC C'*       * PRINT TIME  :                 '
         DC C'                               *       *'              1A
         DC C'*       ********************************'
         DC C'********************************       *'              1B
         DC C'*                                       '
         DC C'                                       *'              1C
         DC C'****************************************'
         DC C'****************************************'              1D
BNRBFEND DS 0C
BNRBFLEN EQU BNRBFEND-BNRBUF      BANNER PAGE BUFFER LENGTH
*
BNRHOST  DC    CL44'&HOSTNAME'           PAGE: HOSTNAME FROM PARM
BNRPNTRC DC    CL44'DEST(        ), SYSOUT CLASS( ), FORM(    )'
* TIME AND DATE EDIT FORMATS
DATEPTN  DC    X'40212020207A21204020202020612120612120'
* EDIT MEANING:  b ( d d d : d d b ( d d d / d d / d d
DATEPTNL EQU   *-DATEPTN
*---------------------------------------------------------------------*
*        PROGRAM DSECTS: MAPING DSECTS
*---------------------------------------------------------------------*
* MAPPING DSECTS
IRXSTATD DSECT                    16 byte static IRE storage
IRXDSTGA DS    A                  Address of dynamic storage area
*
* File Status: control the procedures of record processing:
*  Initial: IRX1STR, set in OPEN routine
*  In status of IRX1STR, process the banner page.
*    If no banner required, or banner page is processed,
*    the status is changed to IRX1STP.
*  In status of IRX1STP, process the PCL command.
*    If no PCL command required, or PCL command is processed,
*    the status is changed to IRX1STI.
*  In status of IRX1STI, process the first record.
*    After the first record is processed,
*    the status is changed to IRXNXTR.
*
*
IRXFLAG  DS    X                  File status flag
IRX1STR  EQU   X'00'              ... Flag of first time call
IRX1STP  EQU   X'01'              ... Flag to process PCL commands
IRX1STI  EQU   X'02'              ... Flag to process first record
IRXNXTR  EQU   X'03'              ... READ NEXT RECORD (NOT FISRT)
IRXNXTI  EQU   X'04'              ... INSERT NEXT RECORD (NOT FIRST)
IRX1STM  EQU   X'05'              ... FIRST RECORD FOR MACHINE CODE
*                                 ... ACTUALLY THE SECOND RECORD
         DS    3X                 unused
         DS    D                  unused
*---------------------------------------------------------------------*
*        PROGRAM DSECTS: DYNAMIC ALLOCATED STORAGE
*---------------------------------------------------------------------*
XPCLSTG  DSECT
SAVEAREA DS    18F                Save Area
SAVERTN1 DS    F                  save area for LEVEL 1 CALL
SAVERTN2 DS    F                  save area for LEVEL 2 CALL
* TIME MACRO LIST FORM
TIMELST  TIME  LINKAGE=SYSTEM,MF=L   TIME LIST FORM
RECLEN   DS    F                  RECORD LENGTH FOR FIX LENGTH
* RECORD TYPE BYTE
RECFM    DS    C                  RECORD LENGTH TYPE V OR F
RECFMFB  EQU   C'F'               FIXED LENGTH RECORD TYPE
RECFMVB  EQU   C'V'               VARIABLE LENGTH RECORD TYPE
* FLAG TO SHOW IF COPY THE SOURCE RECORD
COPYREC  DS    X                  VALUE: YES OR NO
* CARRIAGE CONTROL BYTE
CCBYTE   DS    X                  CURRENT CC BYTE
CCBYTESV DS    X                  CC BYTE OF PREVIOUS RECORD
CCBYTETM DS    X                  TEMPORARY BUFFER FOR EXCHANGE CCBYTE
* CARRIAGE CONTROL TYPE
CCMODE   DS    X                  CARRIAGE CONTROL TYPE
CCMODASA EQU   X'0'               ASA CARRIAGE CONTROL MODE
CCMODMC  EQU   X'1'               PRINTER CHANNEL COMMANDS(MAHINE CODE)
* ASA CARRIAGE CONTROL BYTE TYPES
CCTP0SP  EQU   C'+'               CC BYTE '+' 0 LINE FEED (OVERSTRIKE)
CCTP1SP  EQU   C' '               CC BYTE ' ' 1 LINE FEED
CCTP2SP  EQU   C'0'               CC BYTE '0' 2 LINE FEED
CCTP3SP  EQU   C'-'               CC BYTE '-' 3 LINE FEED
* END OF MACHINE CODE TRANSLATION TABLE
* BANNER PAGE FIELD DEFINITIONS
BNRHOSTL EQU   X'14'              BANNER PAGE: FROM HOST LINE #
*PRINTER MODEL
BNRPNTR  DS    0CL44              BANNER PAGE: PRINTER NAME
         DS    CL5
BNRDEST  DS    CL8                BANNER PAGE: PRINTER DEST
         DS    CL16
BNRCLAS  DS    CL1                BANNER PAGE: SYSOUT CLASS
         DS    CL8
BNRFORM  DS    CL4                BANNER PAGE: PRINT FORM
         DS    CL2
*END OF PRINTER MODEL
BNRPNTRL EQU   X'15'              BANNER PAGE: PRINTER NAME LINE #
BNRUSER  DS    CL44               BANNER PAGE: USER NAME
BNRUSERL EQU   X'16'              BANNER PAGE: USER NAME LINE #
BNRJBNM  DS    CL44               BANNER PAGE: JOB NAME
BNRJBNML EQU   X'17'              BANNER PAGE: JOB NAME LINE #
BNRDSSN  DS    CL44               BANNER PAGE: STEP NAME
BNRDSSNL EQU   X'18'              BANNER PAGE: STEP NAME LINE #
BNRDDNM  DS    CL44               BANNER PAGE: DD NAME
BNRDDNML EQU   X'19'              BANNER PAGE: DD NAME LINE #
BNRTIME  DS    CL44               BANNER PAGE: TIME AND DATE
BNRTIMEL EQU   X'1A'              BANNER PAGE: TIME AND DATE LINE #
*
BNRLNCTR DS    X                  CURRENT LINE NUMBER IN BANER PAGE
BNRBFPOS DS    F                  CURRENT LINE START ADDRESS
BNRBFEOF DS    X                  FLAG TO TELL IF AT THE LAST LINE
* BANNER LENGTH CONSTANTS
BNRFDBYT EQU   X'18'              FIELD START POSITION      : 24
BNRFDLEN EQU   X'2C'              FIELD LENGTH IN BYTES     : 44
BNRRCLEN EQU   X'50'              BANNER RECORD LENGTH      : 80
* PCL COMMAND FLAGS
PCLFLAG  DS    X                  FLAG FOR PCL COMMAND PROCESSING
PCLINIT  EQU   X'00'              INITIAL STATUS, NOT YET PROCESSED.
PCLINST  EQU   X'01'              REQUIRE TO PROCESS PCL COMMAND
*
DATEAREA DS    0CL17              TIME MACRO FORMAT: HHMMSSssYYYYMMDD
         DS    X                  '01' FOR TEMPORARY BYTE
DATESAVE DS    CL16               TIME MACRO FORMAT: HHMMSSssYYYYMMDD
         DS    0D                 Round up to double word boundary
XPCLSTGL EQU   *-XPCLSTG          Length of dynamic storage area
********************************************************************
* DUMMY SECTION: DATA TABLE
********************************************************************
         DS    0D                 Round up to double word boundary
* WORK RECORD BUFFER: SINGLE RECORD PER EXECUTION CONTROL
RECSTG   DSECT
RECORD   DS    CL4092             MAXIMUM 4092 BYTE OF RECORDS
RECSTGL  EQU   *-RECSTG           LENGTH OF THIS DSECT
STGLEN   EQU   XPCLSTGL+RECSTGL   TOTAL DSECT LENGTH
         SPACE 5
         EZAPPFCD IRE=DSECT,   DSECT for input record exit parameters  X
               RDA=DSECT       DSECT for routing data area
         SPACE 5
         IAZFSIP LIST=YES          JES FSI PARAMETER LIST
         SPACE 5
         IAZJSPA LIST=YES          JOB SEPARATOR PAGE DATA AREA
         SPACE 5
.END     END   EXITNPFR            End of EXPCLLS0  module
