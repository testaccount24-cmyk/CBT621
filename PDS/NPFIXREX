/* REXX */
/* REXX Program: NPFEXBLD
   Purpose: Build NPF Exit Load Module
   Design: Hunter Guanghui Zhou
           Phone: 1-(416)-602-9567
           E-mail: zhough2000@yahoo.com
   Last Update: September 2003

  SYSIN DD DESCRIPTION
  ====================
#######################################################################
#              INPUT FILE FOR NPF EXIT BUIULD PROGRAM
#              ======================================
# KEYWORD DESCRIPTIONS:
# SOURCE      : OPTIONAL, DEFAULT=NPFIXASM
#               THE SOURCE ASSEMBLER PROGRAM MEMBER NAME
# SOURCELIB   : OPTIONAL, DEFAULT=PDS of current REXX program.
#               THE PDS OF SOURCE PROGRAM
# TCPIPMACLIB : OPTIONAL, DEFAULT= TCPIP.SEZACMAC
#               TCP/IP MACRO LIBRARY
# REFRESHLLA  : OPTIONAL, DEFAULT= YES
#               WHETHER TO REFRESH LINKLST AFTER BUILD EXIT MODULES.
# LOADLIB     : MANDATORY, no DEFAULT
#               THE LOADLIB TO STORE THE EXIT PROGRAMS, MUST BE IN
#               YOUR SYSTEM LINKLST
# JOBCARD     : OPTIONAL, DEFAULT=Member NPFIXJCL of current REXX PDS.
#               JOBCARD MEMBER
# LISTDETAIL  : OPTIONAL, DEFAULT=NO
#               The compile and link list option.
# EXIT        : MANDATORY, No default
#               Each EXIT statement is a load module to be built
#               See the comments below for detail description.
#######################################################################
  LOADLIB     = SYS1.TEST.LINKLIB                # loadlib for exits
######################################################################
# Field Descriptions in EXIT statement
# ------------------------------------
# TITL   : The title for each exit load module, must be 'EXIT'.
# MODULE : The load module name which will be build into LOADLIB.
# BNR    : YES/NO to generate the banner page.
#          If no, the hostname is ignored.
# CC     : YES/NO to translate the carriage control characters.
# PCL    : YES/NO to insert PCL commands for printers support PCL.
#          Normally the laser printers will support PCL commands.
#          If no, the FORM field is ignored.
# FORM   : The predefined form for PCL commands.
#          The form will control the font-size, orientation, and
#          paper types.
#           FORM ORIENT    PAPER    Duplex SPACES PITCH
#           ==== ========= ======== ====== ====== =====
#           PT00 PORTRAIT  DEFATULT YES      5     17
#           PT01 PORTRAIT  DEFATULT YES      5     14
#           PT02 PORTRAIT  DEFATULT NO       5     17
#           LS00 LANDSCAPE DEFAULT  YES      4.5   14
#           LS01 LANDSCAPE DEFAULT  YES      5.7   13
#           LS02 LANDSCAPE DEFAULT  NO       4.5   14
#           LG00 LANDSCAPE LEGAL    YES      4.5   14
#           LG01 PORTRAIT  LEGAL    YES      5     17
#     * Duplex YES means use duplex if the printer supports it.
#     * SPACES 5 means 5/48 inch vertical motion index, or
#       spaces between lines.
#     * PITCH is the number of characters per inch, or pitch.
#       This reflects the size of the font.
# SKP      : YES/NO to skip the first form feed control character
#          This is for Carriage Control files.
# HOSTNAME : The TCP/IP Hostname of the mainframe to use the exit.
#          This hostname is only used in banner page for informational
#          purpose. Host name is ignored if BNR is NO.
######################################################################
#TITL MODULE   BNR CC  PCL FORM SKP HOSTNAME
#==== ======== === === === ==== === ==================================
 EXIT=EXPCLLS0,YES,YES,YES,LS00,YES,maintest.agora.lan
 EXIT=EXPCLLS1,YES,NO ,YES,LS00,YES,maintest.agora.lan
 EXIT=EXPCLLS2,YES,YES,YES,LS01,YES,maintest.agora.lan
 EXIT=EXPCLLS3,YES,YES,YES,LS02,YES,maintest.agora.lan
 EXIT=EXPCLPT0,YES,YES,YES,PT00,YES,maintest.agora.lan
 EXIT=EXPCLPT1,YES,NO ,YES,PT00,YES,maintest.agora.lan
 EXIT=EXPCLPT2,YES,YES,YES,PT01,YES,maintest.agora.lan
 EXIT=EXPCLPT3,YES,YES,YES,PT02,YES,maintest.agora.lan
 EXIT=EXPCLLG0,YES,YES,YES,LG00,YES,maintest.agora.lan
 EXIT=EXPCLLG1,YES,YES,YES,LG01,YES,maintest.agora.lan
 EXIT=EXTEXT00,NO ,NO ,NO ,    ,YES,maintest.agora.lan
 EXIT=EXTEXT01,NO ,YES,NO ,    ,YES,maintest.agora.lan
 EXIT=EXTEXT02,YES,YES,NO ,    ,YES,maintest.agora.lan
######################################################################
# LOGO OF THE BANNER PAGE
# =======================
#
# 1. MAXIMUM 17 RECORDS (lines)
# 2. EACH RECORD IS 80 BYTE LONG, program will pad with spaces
# 3. ANY RECORDS BEYOND 17th LINE WILL BE IGNORED.
# 4. If the total records less than 17, then the empty records will be
#    added to make up total 17 records.
BANNER_LOGO_START
*  OS/390 V2.10                               TCP/IP Network Print Facility    *
*            ...                                                .::::.         *
*         .:::::       :::                                      ::::::         *
*        .:::'''       :::               ...      ...  ..       ::::::         *
*        :::  .:::::.  :::::::.   .:::::.'::.    .::'.:::  .::::'::::'::::.    *
*        ::: .:::::::. ::::::::. .:::::::.'::.  .::':::''  ::::::    ::::::    *
*        ::: :::   ::: :::   ::: :::  ::'' ':::.::  :::    ::::::    ::::::    *
*       .::: :::   ::: :::   ::: :::.:' .   ::::'  .:::    '::::.::::.::::'    *
*    ..::::' '::...::' '::...::' ':::. :::  :::' ::::'          ::::::         *
*    ::::''   ':::::'   ':::::'   ':::::'' .::'  :::'           ::::::         *
*    '''                                  .::'                  '::::'         *
*                                        .::'                                  *
*                     Sobeys Ontario Mainframe System                          *
*                                                                              *
*                          Network Print Service                               *
*                                                                              *
*     Information Technology, 6355 Viscount Road, Mississauga, ON L4V 1W2      *
BANNER_LOGO_STOP
######################################################################
# EBCDIC TO ASCII Translation table
# =================================
# 1. Any leading spaces and empty line will be ignored.
# 2. There must be 16 lines with 32 bytes each line
# 3. The bytes must be from 0-9 A-F.
# 4. Any trailing comments will be ignored.
EBCDIC_TO_ASCCII_TABLE_START
   00010203DC09C37FCAB2D50B0C0D0E0F  #00
   10111213DBDA08C11819C8F21C1D1E1F  #10
   C4B3C0D9BF0A171BB4C2C5B0B1050607  #20
   CDBA16BCBBC9CC04B9CBCEDF1415FE1A  #30
   20FF838485A0C68687A4BD2E3C282B7C  #40
   268288898AA18C8B8DE121242A293BAA  #50
   2D2FB68EB7B5C78F80A5DD2C255F3E3F  #60
   9B90D2D3D4D6D7D8DE603A2340273D22  #70
   9D616263646566676869AEAFD0ECE7F1  #80
   F86A6B6C6D6E6F707172A6A791F792CF  #90
   E67E737475767778797AADA8D1EDE8A9  #A0
   5E9CBEFAB8F5F4ACABF35B5DEEF9EF9E  #B0
   7B414243444546474849F0939495A2E4  #C0
   7D4A4B4C4D4E4F505152FB968197A398  #D0
   5CF6535455565758595AFDE299E3E0E5  #E0
   30313233343536373839FCEA9AEBE99F  #F0
EBCDIC_TO_ASCCII_TABLE_STOP
######################################################################
*/


/* server starts here. */
main:
  parse arg mainargs
  Code=ValdiateDDAllocation();    if Code\=0 then x=Exit_Error(Code)
  Code=Init_Main();               if Code\=0 then x=Exit_Error(Code)
  x=ShowWelcomeInfo()
  if mainargs \= '' then do
      Code=ProcessOptions(mainargs)
      Exit_Error(Code)
  end
  Code=ReadConfig();              if Code\=0 then x=Exit_Error(Code)
  Code=UpdateSource();            if Code\=0 then x=Exit_Error(Code)
  Code=BuildCompileJCL();         if Code\=0 then x=Exit_Error(Code)
  Code=SubmitCompileJCL();        if Code\=0 then x=Exit_Error(Code)
  Exit_Error(Code)
/* end of main program */


ProcessOptions:
  parse arg options
  upper options
  if left(options,7) == 'MVSCMD ' then do
     parse var options 'MVSCMD' mvs_cmd
     x=Console_Command(mvs_cmd)
  end
  else do
     x=log('NXB007E The option' options ' is invalid.')
     return 8
  end
return 0


ValdiateDDAllocation:
  drop vda_code
  vda_code = 0
  if CheckDDName('SYSIN')==0 then do
     x=log('NXB010E The madatory SYSIN DD is missing.')
     vda_code = 8
  end

  return vda_code

Init_Main:
  Start_Time = Time()
  Start_Date = Date()
  ShutDown   = 0
  TaskName   = mvsvar('SYMDEF','JOBNAME')
  ProgramTitle = 'Generate NPF Exit Load Module Program'

  /* Program Required Programs: */
  PGM_WTO        = '*(WTO)'
  PGM_Wait       = '*(WAIT)'

  /* Confiuguration Settings */
  DROP CompileJCL.   /* Archive Skeleton JCL */
  DROP Keyword.
  DROP Config.
  DROP Type.
  DROP NoBlank.

  DROP ExitRec.   /* EXIT Load Module Statements in Config.*/
  DROP OLogo.     /* Banner Page Logo Statements in Config.*/
  DROP NLogo.     /* Banner Page Logo Statements in Assembler */
  DROP E2ATable.  /* EASCII to ASCII table Statements in Config.*/

  DROP DSSField.  /* Data Set Status Record Fields. */
  DROP DSSFBeg.
  DROP DSSFLen.
  DROP DSList.     /* current datasets ready to processing */
  DROP DSExisting. /* existing datasets in DSStatus. */
  DROP ARCKeywords.
  DROP ARCKeyLines.

  x=msg('OFF')
  iSOURCE                       =1
  iSOURCELIB                    =2
  iTCPMACLIB                    =3
  iREFRESHLLA                   =4
  iLISTDETAIL                   =5
  iLOADLIB                      =6
  iJOBCARD                      =7
  iEXIT                         =8
  TotalKeywords                 =8

  Keyword.iSOURCE               = 'SOURCE'
  Keyword.iSOURCELIB            = 'SOURCELIB'
  Keyword.iTCPMACLIB            = 'TCPIPMACLIB'
  Keyword.iREFRESHLLA           = 'REFRESHLLA'
  Keyword.iLISTDETAIL           = 'LISTDETAIL'
  Keyword.iLOADLIB              = 'LOADLIB'
  Keyword.iJOBCARD              = 'JOBCARD'
  Keyword.iEXIT                 = 'EXIT'

  Config.iSOURCE                = 'NPFIXASM'
  Config.iSOURCELIB             = ''
  Config.iTCPMACLIB             = 'TCPIP.SEZACMAC'
  Config.iREFRESHLLA            = 'YES'
  Config.iLISTDETAIL            = 'NO'
  Config.iLOADLIB               = ''
  Config.iJOBCARD               = ''
  Config.iEXIT                  = ''

  Type.iSOURCE                  = 'ANY'
  Type.iSOURCELIB               = 'DATASET'
  Type.iTCPMACLIB               = 'DATASET'
  Type.iREFRESHLLA              = 'ANY'
  Type.iLISTDETAIL              = 'ANY'
  Type.iLOADLIB                 = 'DATASET'
  Type.iJOBCARD                 = 'DATASET'
  Type.iEXIT                    = 'ANY'

  NOBlank.iSOURCE                = 'NO'   /* YES: cannot be blank. */
  NOBlank.iSOURCELIB             = 'NO'   /* YES: cannot be blank. */
  NOBlank.iTCPMACLIB             = 'NO'   /* YES: cannot be blank. */
  NOBlank.iREFRESHLLA            = 'NO'   /* YES: cannot be blank. */
  NOBlank.iLISTDETAIL            = 'NO'   /* YES: cannot be blank. */
  NOBlank.iLOADLIB               = 'YES'  /* NO : can be blank.    */
  NOBlank.iJOBCARD               = 'NO'   /* NO : can be blank.    */
  NOBlank.iEXIT                  = 'YES'

  Config.0                      = TotalKeywords
  NOBlank.0                     = TotalKeywords
  Keyword.0                     = TotalKeywords
  Type.0                        = TotalKeywords


  /* #     FORM ORIENT    PAPER    Duplex SPACES PITCH
     #     ==== ========= ======== ====== ====== =====
     #     PT00 PORTRAIT  DEFATULT YES      5     17
     #     PT01 PORTRAIT  DEFATULT YES      5     14
     #     PT02 PORTRAIT  DEFATULT NO       5     17
     #     LS00 LANDSCAPE DEFAULT  YES      4.5   14
     #     LS01 LANDSCAPE DEFAULT  YES      5.7   13
     #     LS02 LANDSCAPE DEFAULT  NO       4.5   14
     #     LG00 LANDSCAPE LEGAL    YES      4.5   14
     #     LG01 PORTRAIT  LEGAL    YES      5     17

  */
  PCLForm.1  = 'PT00'
  PCLForm.2  = 'PT01'
  PCLForm.3  = 'PT02'
  PCLForm.4  = 'LS00'
  PCLForm.5  = 'LS01'
  PCLForm.6  = 'LS02'
  PCLForm.7  = 'LG00'
  PCLForm.8  = 'LG01'
  PCLForm.0  = 8
  Debug      = 0
  LogoUpdated = 0
  E2AUpdated = 0
  /* Updated Source dataset and Member name   */
  UpdateSourceDS = ''
  x=GetSystemInfo()

  return 0

GetSystemInfo:
  drop SYSINFO.
  SYS_OS       = 1
  SYS_SYSPROC  = 2
  SYS_USERID   = 3
  SYS_JOBNAME  = 4
  SYS_JOBID    = 5
  SYS_JOBTYPE  = 6
  SYS_ASID     = 7
  SYS_SYSID    = 8
  SYS_PROGRAM  = 9
  SYS_JES      = 10
  SYS_EXECDSN  = 11
  SYS_EXECNAME = 12
  SYS_TOTAL    = 12        /*Total number of system info items. */
  tcb      = ptr(540)
  ascb     = ptr(548)
  tiot     = ptr(tcb+12)
  jscb     = ptr(tcb+180)
  ssib     = ptr(jscb+316)
  asid     = c2x(stg(ascb+36,2))
  jobtype  = stg(ssib+12,3)
  jobnum   = strip(stg(ssib+15,5),'L',0)
  stepname = stg(tiot+8,8)
  procstep = stg(tiot+16,8)
  program  = stg(jscb+360,8)
  parse source . . execname execdsn rest

  if pos('.', execdsn)==0 then /* If execdsn is a DDNAME */
     execdsn=Get_DDDataset_Name(execdsn,execname)

  SYSINFO.0            = SYS_TOTAL
  SYSINFO.SYS_OS       = mvsvar('SYSOPSYS')
  SYSINFO.SYS_SYSID    = mvsvar('SYSNAME')
  SYSINFO.SYS_JOBNAME  = mvsvar('SYMDEF','JOBNAME')
  SYSINFO.SYS_SYSPROC  = sysvar('SYSPROC')
  SYSINFO.SYS_USERID   = sysvar('SYSUID')
  SYSINFO.SYS_JES      = sysvar('SYSJES')
  SYSINFO.SYS_JOBTYPE  = jobtype
  SYSINFO.SYS_JOBID    = jobtype||right(jobnum,5,'0')
  SYSINFO.SYS_ASID     = asid
  SYSINFO.SYS_PROGRAM  = program
  SYSINFO.SYS_PROCSTEP = procstep
  SYSINFO.SYS_EXECDSN  = execdsn
  SYSINFO.SYS_EXECNAME = execname

return 0

/******************************************************/
/* Function: ReadConfig()                              */
/* Read configuration from CONFIG DD                  */
/******************************************************/
ReadConfig:
  RCode = 0
  DROP InLines.
  'EXECIO * DISKR SYSIN (STEM InLines. FINIS'
  if RC\=0 then do
    x= Log("NXB070E There is an error while reading SYSIN DD")
    return 8
  end

  ex_count=0
  ex_logo=0
  ex_e2a=0
  iLogo=0
  iE2A=0
  do iline=1 to InLines.0
    record = Strip(InLines.iline)

    /* read Logo of Banner Page */
    if left(record,17) == 'BANNER_LOGO_START' then do
       ex_logo=1; iterate; end
    if left(record,16) == 'BANNER_LOGO_STOP' then do
       ex_logo=0; iterate; end
    if ex_logo then do
       iLogo = iLogo + 1; OLogo.iLogo = InLines.iLine; iterate; end

    /* Remote all commets */
    if left(record,1) = '#' then iterate
    if pos('#',record) > 1 then
       record = strip(substr(record,1,pos('#',record)-1))
    if length(record) == 0 then iterate

    /* read EBCDIC to ASCII table */
    if left(record,28) == 'EBCDIC_TO_ASCCII_TABLE_START' then do
       ex_e2a=1; iterate; end
    if left(record,27) == 'EBCDIC_TO_ASCCII_TABLE_STOP' then do
       ex_e2a=0; iterate; end
    if ex_e2a then do
       iE2A=iE2A+1; upper record; E2ATable.iE2A=record; iterate; end

    /* process normal configuration settings */

    parse var record Title '=' Value

    Upper Title
    Value = Strip(Value)
    Title = Strip(Title)
    do keyitem=1 to Keyword.0
      if Title=Keyword.keyitem & Value \= '' then do
        if TestStringType(Value, Type.keyitem) == 'NO' then do
           RC2=Log("NXB071E Input of " Title "is invlaid.")
           RCode = 8
           leave
        end
        if Title \= 'EXIT' then Config.keyitem = Value
        else do /* Read EXIT Load Module Records */
           ex_count = ex_count + 1
           ExitRec.ex_count = Value
           Config.keyitem = ex_count
        end
        if debug then x=debug('Read' Keyword.keyitem'='Value)
      end
    end
  end
  ExitRec.0 = ex_count
  OLogo.0 = iLogo
  E2ATable.0 = iE2A

  upper Config.iREFRESHLLA

  if Config.iSOURCELIB == '' then
     Config.iSOURCELIB = SYSINFO.SYS_EXECDSN

  if Config.iJOBCARD == '' then
     Config.iJOBCARD = SYSINFO.SYS_EXECDSN||'(NPFIXJCL)'

  x=log('NXB072I Here are the build options in SYSIN:')
  do keyitem=1 to Config.0
    x=log('NXB072I   '||left(Keyword.keyitem,12)||'= 'Config.keyitem)
    if NOBlank.keyitem = 'YES' & Config.keyitem = '' then do
      RC2=Log("NXB072E In input: "Keyword.keyitem,
                   "cannot be blank.")
      RCode = 8
    end
  end

  if \CheckDataset(Config.iLOADLIB,'PDS') then do
      RCode=8
      RC2=Log("NXB073E The loadlib "Config.iLOADLIB,
                   "does not exist.")
  end

  if \CheckDataset(Config.iSOURCELIB,'PDS') then do
      RCode=8
      RC2=Log("NXB073E The source library "Config.iSOURCELIB,
                   "does not exist.")
  end

  if \CheckDataset(Config.iTCPMACLIB,'PDS') then do
      RCode=8
      RC2=Log("NXB074E The source library "Config.iTCPMACLIB,
                   "does not exist.")
  end

  if \CheckDatasetExistance(Config.iTCPMACLIB'('EZAPPFCD')') then do
      RCode=8
      RC2=Log("NXB075E The TCP/IP MACLIB "Config.iTCPMACLIB,
                   "do have EZAPPFCD MACRO.")
  end

  if Config.iREFRESHLLA \= 'YES' & Config.iREFRESHLLA \= 'NO' then do
      RCode=8
      RC2=Log("NXB076E The value of REFRESHLLA must be either",
                   "YES or NO.")
  end

  if \CheckDatasetExistance(Config.iJOBCARD) then do
      x=Log("NXB077E Cannot find the JOBCARD file ",
           Config.iJOBCARD)
      RCode=8
  end

  if ValidateLogo()>0     then RCode=8
  if ValidateE2ATable()>0 then RCode=8

  UpdateSourceDS = Config.iSourceLib||'(NPFIXUST)'
return RCode

/* Validate the Logo
 */
ValidateLogo:
   if OLogo.0 == 0 then return 0
   LogoUpdated = 1
   if OLogo.0 < 17 then do
      do iLogo=OLogo.0 to 17; OLogo.iLogo=left(' ',80); end
   end
   OLogo.0 = 17
   iNL = 0
   /* split the logo record from 1 to 2 */
   do iLogo=1 to OLogo.0
      NewRec = substr(left(OLogo.iLogo, 80),1,80)
      iNL = iNL + 1
      NLogo.iNL = substr(NewRec, 1, 40)
      iNL = iNL + 1
      NLogo.iNL = substr(NewRec, 41, 40)
   end
   NLogo.0 = iNL
   /* Convert ' to '' */
   do iLogo=1 to NLogo.0
      NewRec = NLogo.iLogo
      NLogo.iLogo = ''
      do iNL=1 to 40
        Char = substr(NewRec,iNL,1)
        NLogo.iLogo = NLogo.iLogo||Char
        if Char == "'" then
        NLogo.iLogo = NLogo.iLogo||Char
      end
   end

return 0

/* Validate the EBCDIC to ASCII table.
 */
ValidateE2ATable:
   validbytes = '0123456789ABCDEF'
   if E2ATable.0 == 0 then return 0
   E2AUpdated = 1
   if E2ATable.0 \= 16 then do
      x=Log('NXB110E The EBCDIC to ASCII table must be 16 lines')
      return 8
   end

   do iE2A=1 to 16
      if length(E2ATable.iE2A) \= 32 then do
         x=Log('NXB111E The line length of EBCDIC to ASCII',
                    'table must be 32 bytes.')
         return 8
      end
      do iCol=1 to 32
         byte = substr(E2ATable.iE2A,iCol,1)
         if pos(byte, Validbytes) ==0 then do
            x=Log('NXB112E The byte in EBCDIC 2 ASCII table must',
            'be 0-9 A-F')
            return 8
         end
      end
   end
return 0

/*===================================================================*/
/* Check if the given dataset is given type.
   return 1: Match!
   return 0: not match
*/
CheckDataset:
  parse arg GivenDSName,CD_DSNType
  if GivenDSName=='' then return 1
  if CD_DSNType == '' then CD_DSNType = 'SEQUENTIAL'
  if left(GivenDSName,1) \= "'" then GivenDSName = "'"GivenDSName"'"
  upper GivenDSName CD_DSNType
  Drop DDResults.
  DSNType = LISTDSI(GivenDSName)
  if DSNType > 4 then DO
    if CD_DSNType == 'ANY' then return 0
    if SYSREASON = '005' then ErrMsg=GivenDSName' does not exist.'
    ErrMsg=GivenDSName,
        ' - Error while reading, code:'DSNType', reason:'SYSREASON'.'
    x=Log('NXB060E' ErrMsg)
    return 0
  end
  if CD_DSNType == 'ANY' then return 1

  select
     when SYSDSORG = 'PO' then FIleType = 'PDS'
     when SYSDSORG = 'PS' then FIleType = 'SEQUENTIAL'
     when SYSDSORG = 'DA' then FIleType = 'LIBRARY'
     when SYSDSORG = 'VS' then FIleType = 'VSAM'
     otherwise FileType = SYSDSORG
  end
  if CD_DSNType == 'SEQUENTIAL' then do
    if FileType == 'PDS' then do
      if pos('(', Cfg_File) == 0  then do
    RC2=Log("NXB061E You must give the member in PDS "GivenDSName)
        return 0
      end
      else return 1
    end
  end
  if CD_DSNType \= FileType then do
     RC2=Log("NXB062E The "GivenDSName "must be "CD_DSNType,
        ", but it's "FileType)
     return 0
  end
  return 1

/* Check the existance of the given dataset or PDS member
   return 1: Match!
   return 0: not match
*/
CheckDatasetExistance:
   parse arg CKDS_DSN
   /* File(Mem1,Mem2...)*/
   drop DSName Member
   if pos('(',CKDS_DSN)>0 then do
         parse var CKDS_DSN DSName '(' Member ')'
         DSName = Strip(DSName)
         Member = Strip(Member)
   end
   else do
         DSName = Strip(CKDS_DSN)
         Member = ''
   end
   parse value CheckDatasetType(DSName) with CKDSCode ':' CKDSDesp

   if CKDSCode \= 0            then return 0
   if Member   == ''           then return 1
   if CKDSDesp \= 'PDS'        then return 0  /* Only PDS has members */
   if sysdsn("'"CKDS_DSN"'") == 'OK' then return 1
   return 0

CheckDatasetType:
   parse arg DSNTParms
   TypeDSName=DSNTParms
   if left(DSNTParms,1) \= "'" then TypeDSName = "'"TypeDSName
   if right(DSNTParms,1) \= "'" then TypeDSName = TypeDSName"'"

   DSNType = LISTDSI(TypeDSName)
   if DSNType > 4 then DO
     if SYSREASON = '005' then return '1:'TypeDSName' does not exist.'
     return '2:'TypeDSName,
         ' - Error while reading, code:'DSNType', reason:'SYSREASON'.'
   end
   select
      when SYSDSORG = 'PO' then FIleType = 'PDS'
      when SYSDSORG = 'PS' then FIleType = 'SEQUENTIAL'
      when SYSDSORG = 'DA' then FIleType = 'LIBRARY'
      when SYSDSORG = 'VS' then FIleType = 'VSAM'
      otherwise FileType = SYSDSORG
   end
   return '0:'FileType

/* Build the comiple JCL here */
BuildCompileJCL:
   drop JCL.
   bc_code = 0
   iJCL=0
   JCL.0 = 0
   x=log("NXB060I Generate the compile JCL for exit modules.")
   bc_code=BuildJobCard()
   if bc_code >0 then return bc_code

   do iBCJ=1 to ExitRec.0
      if BuildOneModule(ExitRec.iBCJ)>0 then bc_code = 8
   end

   /* call this program again to issue the console command. */
   if Config.iREFRESHLLA == 'YES' then do
      x=addjcl(left("//*",70,"*"))
      x=addjcl("//* ISSUE CONSOLE COMMAND TO REFRESH THE LINKLST")
      x=addjcl("//* COMMAND TO BE ISSUED: F LLA,REFRESH")
      x=addjcl("//REFRESH  EXEC PGM=IKJEFT01,COND=(0,NE),")
      x=addjcl("//   PARM='NPFIXREX MVSCMD F LLA,REFRESH'")
      x=addjcl("//SYSEXEC  DD   DISP=SHR,DSN="SYSINFO.SYS_EXECDSN)
      x=addjcl("//SYSTSPRT DD   SYSOUT=*")
      x=addjcl("//SYSTSIN  DD   DUMMY")
      x=addjcl("//SYSIN    DD   DUMMY")
   end
   x=addjcl(left("//*",70,"*"))
   JCL.0 = iJCL

return bc_code

BuildJobCard:
   "FREE F(JOBCARD)"
   "ALLOC F(JOBCARD) DA('"Config.iJOBCARD"') SHR REUSE"
   "EXECIO * DISKR JOBCARD (STEM InLines. FINIS"
   if RC\=0 then do
      x= Log("NXB070E There is an error while reading JOB Info.")
      return 8
   end
   iBJC = 0
   ijobcard = 0
   do iBJC=1 to InLines.0
      rec =substr(InLines.iBJC,1,72) /* just read 72 bytes */
      parse var rec title key .
      title = strip(title)
      if left(title,2)=='//' & key=='JOB' & left(title,3)\='// ' then do
         x=addjcl(rec)
         ijobcard = 1
         iterate
      end
      if ijobcard == 0 then iterate

      if left(title,3) == '// ' then do
         x=addjcl(rec)
         iterate
      end
      else leave
   end
   x=addjcl('//* This JCL is submitted by 'ProgramTitle)
   x=addjcl('//* Purpose: Build the NPF exit load module.')
   x=addjcl('//* Support: Hunter Zhou, zhough2000@yahoo.com     ')
   x=addjcl('//* ')
return 0

BuildOneModule:
   parse arg record
   parse var record bm_module ',' bm_banner ',' bm_cc ',',
      bm_pcl ',' bm_form ',' bm_skip1ff ',' bm_hostname .
   bo_code = 0
   bm_module = strip(bm_module)
   bm_banner = strip(bm_banner)
   bm_cc     = strip(bm_cc)
   bm_pcl    = strip(bm_pcl)
   bm_form   = strip(bm_form)
   bm_skip1ff= strip(bm_skip1ff)
   bm_hostname= strip(bm_hostname)
   if Config.iLISTDETAIL == 'NO' then  bm_listopt = 'NOLIST,'
   else bm_listopt = 'LIST,'
   x=addjcl(left("//*",70,"*"))
   x=addjcl("//* Build NPF exit load module "bm_module)
   x=addjcl('//* Configuration Summary for this load module:')
   x=addjcl('//*   MODULE:' bm_module)
   x=addjcl('//*   BANNER:' bm_banner)
   x=addjcl('//*   CC    :' bm_cc)
   x=addjcl('//*   PCL   :' bm_pcl)
   x=addjcl('//*   FORM  :' bm_form)
   x=addjcl('//*   SKIPFF:' bm_skip1ff)
   x=addjcl('//*   HOSTNAME:' bm_hostname)
   if bm_module == '' then do
      RC2=Log("NXB081E Load Module is invalid")
      bo_code = 8
      bm_module = ''
   end
   /* validate others ... */
   upper bm_banner bm_module bm_cc bm_pcl bm_pcl bm_form bm_skip1ff

   /* Check Banner */
   if bm_banner=='YES' then bm_banner=1
   else if bm_banner=='NO' then bm_banner=0
   else do
      RC2=Log("NXB082E Banner must be YES or NO.")
      bo_code = 8
      bm_banner  = ''
   end

   /* Check cc */
   if bm_cc=='YES' then bm_cc=1
   else if bm_cc=='NO' then bm_cc=0
   else do
      RC2=Log("NXB083E CC must be YES or NO.")
      bo_code = 8
      bm_cc   = ''
   end

   /* Check pcl*/
   if bm_pcl=='YES' then bm_pcl=1
   else if bm_pcl=='NO' then bm_pcl=0
   else do
      RC2=Log("NXB084E PCL must be YES or NO.")
      bo_code = 8
      bm_pcl  = ''
   end

   /* Check pcl*/
   if bm_skip1ff=='YES' then bm_skip1ff=1
   else if bm_skip1ff=='NO' then bm_skip1ff=0
   else do
      RC2=Log("NXB084E SKIP1FF must be YES or NO.")
      bo_code = 8
      bm_skip1ff  = ''
   end

   /* Check form */
   if_found = 0
   if bm_form \= '' then do
      do iform=1 to PCLForm.0
         if bm_form == PCLForm.iform then do
            if_found = 1
            leave
         end
      end
      if if_found == 0 then do
         RC2=Log('NXB085E The form'bm_form'is invalid.')
         bo_code = 8
      end
   end
   else do
      if bm_PCL == 1 then do
         RC2=Log("NXB086E The form cannot be blank if PCL=YES.")
         bo_code = 8
      end
      bm_form = '    '
   end

   if bo_code \= 0 then return bo_code
   x=addjcl("//"bm_module" EXEC ASMACL,COND=(0,NE),",
           ||"PARM.L='"bm_listopt"RENT',")
   x=addjcl("//  PARM.C='"bm_listopt,
           ||"SYSPARM("bm_banner","bm_cc","bm_pcl",",
           ||bm_skip1ff","bm_form","bm_hostname")'")
   x=addjcl("//C.SYSIN   DD DISP=SHR,DSN="UpdateSourceDS)
   x=addjcl("//C.SYSLIB  DD DISP=SHR,DSN=SYS1.MACLIB")
   x=addjcl("//          DD DISP=SHR,DSN=SYS1.MODGEN")
   x=addjcl("//          DD DISP=SHR,DSN=TCPIP.SEZACMAC")
   x=addjcl("//L.SYSLMOD DD DISP=SHR,DSN="Config.iLOADLIB)
   x=addjcl("//L.SYSIN   DD *")
   x=addjcl("  NAME "bm_module"(R)")
   x=addjcl("/*                ")
   JCL.0=iJCL
return bo_code

addjcl:
  parse arg statement
  iJCL=iJCL+1
  JCL.iJCL = statement
return 0

SubmitCompileJCL:
  "FREE F(SUBMIT)"
  "ALLOC F(SUBMIT) SYSOUT WRITER(INTRDR) LRECL(80) RECFM(F,B)"
  if RC \= 0 then do
     x=log('NXB131E ALLOC ERROR FOR SUBMIT,RC='RC)
     return 8
  end
  "EXECIO * DISKW SUBMIT (STEM JCL. FINIS"
  if RC \= 0 then do
     x=log('NXB132E WRITE ERROR FOR SUBMIT,RC='RC)
     return 8
  end
  "FREE F(SUBMIT)"
  x=log('NXB060I The compile JCL for all exit modules is submitted.')
return 0

/*Update Source;
  Update Assembler source program.
  1. EBCDIC to ASCII table.
  2. Logo of Banner page
 */
UpdateSource:
  drop OldSrc. NewSrc. iNSC iOSC iE2A
  if \LogoUpdated & \E2AUpdated then do
     UpdateSourceDS = Config.iSOURCELIB"("Config.iSOURCE")"
     return 0
  end
  OldSourceDS = Config.iSOURCELIB"("Config.iSOURCE")"
  x=log('NXB140I Update Assembler for Logo and EBCDIC to ASCII table.')
  "FREE F(SOURCE)"
  "ALLOC F(SOURCE) DA('"OldSourceDS"') SHR REUSE"
  if RC \= 0 then do
     x=log('NXB140E ALLOC ERROR FOR SOURCE,RC='RC)
     return 8
  end
  "EXECIO * DISKR SOURCE (STEM OldSrc. FINIS"
  if RC \= 0 then do
     x=log('NXB141E ALLOC ERROR FOR SOURCE,RC='RC)
     return 8
  end
  "FREE F(SOURCE)"

  iLogo=0
  iE2A=0
  NewSrc.1=left('*',70,'*')||'*'
  NewSrc.2=left('* THIS ASSEMBLER SOURCE IS ALTERED BY NPF EXIT',
                ,70,'*')||'*'
  NewSrc.3=left('* PROGRAM. THIS ASSEMBLER IS CUSTOMIZED YOUR',
                ,70,'*')||'*'
  NewSrc.4=left('* INSTALLATION (BANNER PAGE & EBCDIC-ASCII TABLE).',
                ,70,'*')||'*'
  NewSrc.5=left('*',70,'*')||'*'
  iNSC  =5
  do iOSC=1 to OldSrc.0
    parse var OldSrc.iOSC Title Key Val .
    Title = strip(Title,'T')
    Key = Strip(Key)
    Val = Strip(Val)
    if LogoUpdated & Title=='BNRBUF' & Key == 'DS' & Val == '0C' then do
       ipos = pos(" DS", OldSrc.iOSC)
       pref = left(" ",ipos)||"DC C"||"'"
       sufx = "  ;Logo"
       iNSC  = iNSC + 1
       NewSrc.iNSC = OldSrc.iOSC
       iNSC  = iNSC + 1
       iOSC  = iOSC + 1
       NewSrc.iNSC = OldSrc.iOSC
       iNSC  = iNSC + 1
       iOSC  = iOSC + 1
       NewSrc.iNSC = OldSrc.iOSC
       do iLogo=1 to NLogo.0
          iNSC  = iNSC + 1
          NewSrc.iNSC=pref||NLogo.iLogo||"'"
          NewSrc.iNSC=left(NewSrc.iNSC, 64)||sufx
       end
       iOSC=iOSC+34  /* skip 34 lines from old source */
       iterate
    end
    if E2AUpdated & Title=='E2ATAB' & Key=='DS' & Val=='0CL256' then do
       iNSC  = iNSC + 1
       NewSrc.iNSC = OldSrc.iOSC
       ipos = pos(" DS", OldSrc.iOSC)
       pref = left(" ",ipos)||"DC X"||"'"
       sufx = "'  ; EBCDIC TO ASCII"
       do iE2A=1 to E2ATable.0
          iNSC  = iNSC + 1
          NewSrc.iNSC=pref||E2ATable.iE2A||sufx
       end
       iOSC=iOSC+16  /* skip 34 lines from old source */
       iterate
    end
    iNSC  = iNSC + 1
    NewSrc.iNSC = OldSrc.iOSC
  end

  "ALLOC F(SOURCE) DA('"UpdateSourceDS"') SHR REUSE"
  if RC \= 0 then do
     x=log('NXB142E ALLOC ERROR FOR SOURCE,RC='RC)
     return 8
  end
  "EXECIO * DISKW SOURCE (STEM NewSrc. FINIS"
  if RC \= 0 then do
     x=log('NXB143E WRITE ERROR FOR SOURCE,RC='RC)
     return 8
  end
  "FREE F(SOURCE)"

  drop OldSrc. NewSrc. iNSC iOSC iE2A
return 0
/*
*************************************************
*  Verify if given DD name is allocated or not. *
*  If not found, return 0                       *
*  If found, return nnn dataset names           *
*     nnn is total number of datasets allocated.*
*     the dataset names separated by spaces.    *
*************************************************/
CheckDDName:
  parse Arg reqdd .
  tcb = d2x(C2d(Storage('21c', 4)) + 12)
  tiot = c2d(Storage(tcb, 4))+24
  xlen = 0
  xstring = ''
  dsnames = 0
  Do Forever
    tiot = tiot + xlen
    addr = tiot
    xlen = C2d(Storage(D2x(addr), 1))
    If xlen = 0 Then leave
    If Bitand(Storage(d2x(addr + 1), 1), '80'x) = '80'x Then iterate
    addr = tiot + 4
    ddname = Strip(Storage(D2x(addr), 8))
    if ddname \='' & dsnames>0 then leave
    if ddname == reqdd | dsnames>0 then do
        addr = tiot + 12
        dsnaddr = d2x(c2d(Storage(d2x(addr),3)) + 16)
        xstring = xstring||' '||strip(Storage(dsnaddr, 44), 'T')
        dsnames = dsnames + 1
    end
  End
  drop tcb tiot xlen addr ddname
  if dsnames==0 then return 0
  else Return dsnames||xstring

/*===================================================================*/
/* Given the DD Name and member name, found the data set which
   in given DD and has the given member name
 */
Get_DDDataset_Name:
  parse arg DDName,Member
  drop output.
  drop dddsn.
  x=outtrap('output.')
  "LISTALC STATUS SYSNAMES"
  x=outtrap('off')
  if output.0 <0 then return ""
  num=0; begin = 0
  do i=1 to output.0
     if pos('--', output.i)==1 then iterate
     if pos('NULLFILE', output.i)==1 then iterate
     DSN=output.i; i=i+1; DD =output.i
     if pos('  'DDName, DD)==1 then do
        begin = 1;
        num=num+1;  DDDSN.num = strip(DSN);   iterate
     end
     if pos('          ',DD)==1 & begin ==1 then do
        num=num+1;  DDDSN.num = strip(DSN);   iterate
     end
     else if begin==1 then leave
  end
  DDDSN.0 = num
  if DDDSN.0 ==0 then return ''
  if Member == '' then return DDDSN.1  /* If no member name given */
  found = 0; gdn_DSName = ''
  do i=1 to DDDSN.0
     drop output.
     x=outtrap('output.')
     "LISTDS '"DDDSN.i"' MEMBERS"
     x=outtrap('off')
     if output.0 < 1 then iterate
     begin = 0
     do j=1 to output.0
       if pos('--MEMBER', output.j) == 1 then do
          begin = 1; iterate
       end
       if begin ==0 then iterate
       if begin ==1 & pos('--', output.j)==1 then leave
       if begin ==1 then do
          thismember = strip(output.j)
          if thismember == member then do
             found = 1;
             gdn_DSName=DDDSN.i
             leave
          end
       end
     end
     if found==1 then leave
  end
  drop output.
  drop dddsn.
return gdn_DSName

/******************************************************/
/* Function: TestStringType(String,'NUMBER')              */
/* Read configuration from given DD name.             */
/* Support Type:
    NUMBER       : for numbers (0-9)
    IPADDRESS    : for numbers plus '.'
    DATASET      : for (0-9, a-z, A-Z, '_', '.')
    PATH         : for FILENAME plus '/'
    CHAR         : for (a-z, A-Z)
    ALPHANUMBER  : for DIGITS plus CHAR plus '_'
*/
/******************************************************/
TestStringType:
  Parse arg String,Type

    if Type = '' | String = '' then return 'NO'
    if Type = 'ANY' then return 'YES'
    Drop STypes.
    STypes.1 = 'NUMBER'
    STypes.2 = 'IPADDRESS'
    STypes.3 = 'DATASET'
    STypes.4 = 'DATASETWILD'   /*  'SP2487.ZHOUG.*' */
    STypes.5 = 'PATH'
    STypes.6 = 'CHAR'
    STypes.7 = 'ALPHANUMERIC'
    STypes.8 = 'CHARNUMERIC'
    STypes.0 = 8

    Found = 0
    do item=1 to STypes.0
       if STypes.Item = Type then do; Found = 1; leave; end
    end

    if Found = 0 then return 'NO';

    Drop Chars.
    Citem = 1

    if Type \= 'CHAR' then do
      do item=240 to 249; Chars.Citem=D2C(item); Citem = Citem + 1; end
      Chars.0 = Citem - 1;
    end

    if Type \= 'NUMBER' & Type \= 'IPADDRESS' then do
      do item=129 to 137; Chars.Citem=D2C(item); Citem = Citem + 1; end
      do item=145 to 153; Chars.Citem=D2C(item); Citem = Citem + 1; end
      do item=162 to 169; Chars.Citem=D2C(item); Citem = Citem + 1; end
      do item=193 to 201; Chars.Citem=D2C(item); Citem = Citem + 1; end
      do item=209 to 217; Chars.Citem=D2C(item); Citem = Citem + 1; end
      do item=226 to 233; Chars.Citem=D2C(item); Citem = Citem + 1; end
      Chars.0 = Citem - 1;
    end

    if Type = 'IPADDRESS' | Type = 'DATASET',
     | Type = 'DATASETWILD' | Type='PATH' then do
      Chars.Citem='.'; Citem = Citem + 1;
    end

    if Type = 'DATASETWILD' then do
      Chars.Citem='*'; Citem = Citem + 1;
    end

    if Type = 'PATH' then do
      Chars.Citem='/'; Citem = Citem + 1;
      Chars.Citem='\'; Citem = Citem + 1;
    end

    if Type = 'DATASET' | Type = 'DATASETWILD' | Type='PATH' then do
      Chars.Citem='_'; Citem = Citem + 1;
      Chars.Citem='@'; Citem = Citem + 1;
    end

    if Type = 'DATASET' then do
      Chars.Citem='('; Citem = Citem + 1;
      Chars.Citem=')'; Citem = Citem + 1;
    end

    if Type = 'DATASETWILD' then do
      Chars.Citem='?'; Citem = Citem + 1;
    end

    Chars.0 = Citem - 1;
    MyCode = 'YES'
    do Sitem=1 to length(String)
       Found=0
       do Citem = 1 to Chars.0
          if substr(String, Sitem, 1 ) = Chars.Citem then do
             Found = 1; leave
          end
       end
       if Found=0 then do; MyCode='NO'; leave; end
    end

 return MyCode

ShowWelcomeInfo:
   say ' Program    :' ProgramTitle
   say ' Start time :' Start_Date Start_Time
   say ' Design     : Hunter Zhou,  (zhough2000@yahoo.com)     '
   say ' Support    : Hunter Zhou,  (416) 602-9567'
   say left('=',80,'=')
   x=log('NXB001I Welcome to 'ProgramTitle)
   x=log('NXB002I This program is to build the NPF exit load module.')
   return 0
/******************************************************/
/* Function: ErrorLog()                               */
/******************************************************/
errorlog:
   parse arg err_Msg
   say date('S')||","||time()||",ERROR: "err_Msg
   return 0

/******************************************************/
/* Function: Log()                                    */
/******************************************************/
debug:
   parse arg log_Msg
   say date('S')||","||time()||" NXBDBGI "log_Msg
   return 0

log:
   parse arg log_Msg
   say date('S')||","||time()||" "log_Msg
   return 0

/******************************************************/
/* Function: wto() send message to WTO and SYSPRINT   */
/******************************************************/
wto:
  parse arg wto_Msg
  x=l_wto(wto_Msg)
  x=Log(wto_Msg)
return 0

/******************************************************/
/* calltso: Call external program in TSO.             */
/******************************************************/
calltso:
  parse arg pgm,prm
  if prm\='' then
       address tso "CALL "pgm" '"prm"'"
  else
       address tso "CALL "pgm
return 0

/******************************************************/
/* InUse: Check if the dataset is in use              */
/******************************************************/
InUse:
   parse arg dsn
   x = queryenq("'"dsn"'")
   if enqjob.0 >0 then return 1
   else return 0

/*===================================================================*/
/* return a radmon number ranged from the server port */
rand:
  parse arg length
  if length == '' then length = 6
  if \datatype(length,'NUM') then length = 6
  min=left(X2D(SYSINFO.SYS_ASID),length,'0')
  return left(random(min,min+99999),length,'0')
/*===================================================================*/
/* return the pointer at given address. */
ptr: return c2d(storage(d2x(arg(1)),4))
/*===================================================================*/
/* return the contents at given address. */
stg: return storage(d2x(arg(1)),arg(2))

/* YYYYMMDDSSSSS */
GetTimeStamp:
  return Date('S')||Time('S')

Console_Command:
  parse arg CC_Command
  x=Log("NXB160I ISSUE MVS Command:" CC_Command)
  CC_CART = 'IX'||substr(Time('L'),10,6)
  address tso "CONSPROF SOLDISP(NO)"
  address tso "CONSOLE  ACTIVATE NAME("CC_CART")"
  address tso "CONSOLE  SYSCMD("||CC_Command||") CART('"||CC_CART||"')"
  address tso "CONSOLE  DEACTIVATE"
  address tso "CONSPROF SOLDISP(YES)"
return 0

Exit_Error:
  parse arg Error_Code
  x=Log('NXB900I 'ProgramTitle 'is finished with code' Error_Code'.')
  exit(Error_Code)
